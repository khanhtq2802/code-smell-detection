{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.apex.malhar.lib.math;\n\nimport org.apache.apex.malhar.lib.util.BaseNumberValueOperator;\n\nimport com.datatorrent.api.DefaultInputPort;\nimport com.datatorrent.api.DefaultOutputPort;\nimport com.datatorrent.api.Operator.Unifier;\n\n/**\n * This operator implements Unifier interface and emits at end of window minimum of all values sub-classed from Number in the incoming stream.\n * <p>\n * <b>StateFull :</b>Yes, min value is computed over application windows. <br>\n * <b>Partitions :</b>Yes, operator is kin unifier operator. <br>\n * <br>\n * <b>Ports</b>:<br>\n * <b>data</b>: expects V extends Number<br>\n * <b>min</b>: emits V extends Number<br>\n * <br>\n * <br>\n * @displayName Minimum\n * @category Math\n * @tags minimum, numeric\n * @since 0.3.2\n */\n<fim_suffix>public class Min<V extends Number> extends BaseNumberValueOperator<V> implements Unifier<V>\n{\n  /**\n   * Computed low value.\n   */\n  protected V low;\n\n  // transient field\n  protected boolean flag = false;\n\n  /**\n   * Input port that takes a number and compares to min and stores the new min.\n   */\n  public final transient DefaultInputPort<V> data = new DefaultInputPort<V>()\n  {\n    /**\n     * Each tuple is compared to the min and a new min (if so) is stored.\n     */\n    @Override\n    public void process(V tuple)\n    {\n      Min.this.process(tuple);\n    }\n  };\n\n  /**\n   * Unifier process function.\n   */\n  @Override\n  public void process(V tuple)\n  {\n    if (!flag) {\n      low = tuple;\n      flag = true;\n    } else if (low.doubleValue() > tuple.doubleValue()) {\n      low = tuple;\n    }\n  }\n\n  /**\n   * Min output port.\n   */\n  public final transient DefaultOutputPort<V> min = new DefaultOutputPort<V>()\n  {\n    @Override\n    public Unifier<V> getUnifier()\n    {\n      return Min.this;\n    }\n  };\n\n  /**\n   * Emits the max. Override getValue if tuple type is mutable.\n   * Clears internal data. Node only works in windowed mode.\n   */\n  @Override\n  public void endWindow()\n  {\n    if (flag) {\n      min.emit(low);\n    }\n    flag = false;\n    low = null;\n  }\n}<fim_middle>// class below has no smell\n"}