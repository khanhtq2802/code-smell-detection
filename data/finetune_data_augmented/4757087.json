{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.gobblin.crypto;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\nimport javax.xml.bind.DatatypeConverter;\n\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.fs.FileSystem;\nimport org.apache.hadoop.fs.Path;\nimport org.codehaus.jackson.JsonNode;\nimport org.codehaus.jackson.map.ObjectMapper;\n\nimport lombok.extern.slf4j.Slf4j;\n\n\n/**\n * Credential store that reads a JSON map that looks like:\n * {\n *   \"1\": \"<hex encoded key>\",\n *   \"2\": \"<hex encoded key>\"\n * }\n */\n<fim_suffix>@Slf4j\npublic class JsonCredentialStore implements CredentialStore {\n  private static final ObjectMapper defaultMapper = new ObjectMapper();\n  public final static String TAG = \"json\";\n\n  private Map<String, byte[]> credentials;\n\n  /**\n   * Instantiate a new keystore using the file at the provided path\n   */\n  public JsonCredentialStore(String path, KeyToStringCodec codec) throws IOException {\n    this(new Path(path), codec);\n  }\n\n  /**\n   * Instantiate a new keystore using the file at the provided path\n   */\n  public JsonCredentialStore(Path path, KeyToStringCodec codec) throws IOException {\n    credentials =  new HashMap<>();\n\n    FileSystem fs = path.getFileSystem(new Configuration());\n    try (InputStream in = fs.open(path)) {\n      ObjectMapper jsonParser = defaultMapper;\n      JsonNode tree = jsonParser.readTree(in);\n      if (!tree.isObject()) {\n        throw new IllegalArgumentException(\"Json in \" + path.toString() + \" is not an object!\");\n      }\n\n      Iterator<Map.Entry<String, JsonNode>> it = tree.getFields();\n      while (it.hasNext()) {\n        Map.Entry<String, JsonNode> field = it.next();\n        String keyId = field.getKey();\n        byte[] key = codec.decodeKey(field.getValue().getTextValue());\n\n        credentials.put(keyId, key);\n      }\n    }\n\n    log.info(\"Initialized keystore from {} with {} keys\", path.toString(), credentials.size());\n  }\n\n  @Override\n  public byte[] getEncodedKey(String id) {\n    return credentials.get(id);\n  }\n\n  @Override\n  public Map<String, byte[]> getAllEncodedKeys() {\n    return Collections.unmodifiableMap(credentials);\n  }\n}<fim_middle>// class below has no smell\n"}