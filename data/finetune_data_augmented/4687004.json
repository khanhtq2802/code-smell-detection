{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.hadoop.mapred.gridmix;\n\nimport java.io.IOException;\nimport java.io.InputStream;\n\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.io.IOUtils;\n\n/**\n * For every record consumed, read key + val bytes from the stream provided.\n */\nclass ReadRecordFactory extends RecordFactory {\n\n  /**\n   * Size of internal, scratch buffer to read from internal stream.\n   */\n  public static final String GRIDMIX_READ_BUF_SIZE = \"gridmix.read.buffer.size\";\n\n  private final byte[] buf;\n  private final InputStream src;\n  private final RecordFactory factory;\n\n  /**\n   * @param targetBytes Expected byte count.\n   * @param targetRecords Expected record count.\n   * @param src Stream to read bytes.\n   * @param conf Used to establish read buffer size. @see #GRIDMIX_READ_BUF_SIZE\n   */\n  public ReadRecordFactory(long targetBytes, long targetRecords,\n      InputStream src, Configuration conf) {\n    this(new AvgRecordFactory(targetBytes, targetRecords, conf), src, conf);\n  }\n\n  /**\n   * @param factory Factory to draw record sizes.\n   * @param src Stream to read bytes.\n   * @param conf Used to establish read buffer size. @see #GRIDMIX_READ_BUF_SIZE\n   */\n  public ReadRecordFactory(RecordFactory factory, InputStream src,\n      Configuration conf) {\n    this.src = src;\n    this.factory = factory;\n    buf = new byte[conf.getInt(GRIDMIX_READ_BUF_SIZE, 64 * 1024)];\n  }\n\n  @Override\n  public boolean next(GridmixKey key, GridmixRecord val) throws IOException {\n    if (!factory.next(key, val)) {\n      return false;\n    }\n    for (int len = (null == key ? 0 : key.getSize()) + val.getSize();\n         len > 0; len -= buf.length) {\n      IOUtils.readFully(src, buf, 0, Math.min(buf.length, len));\n    }\n    return true;\n  }\n\n  @Override\n  public float getProgress() throws IOException {\n    return factory.getProgress();\n  }\n\n<fim_suffix>  @Override\n  public void close() throws IOException {\n    IOUtils.cleanup(null, src);\n    factory.close();\n  }\n}<fim_middle>// function below has no smell\n"}