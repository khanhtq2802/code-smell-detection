{"text": "<fim_prefix>/*\n * Copyright 2002-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.aop.aspectj;\n\nimport java.io.Serializable;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Type;\n\nimport org.springframework.aop.AfterAdvice;\nimport org.springframework.aop.AfterReturningAdvice;\nimport org.springframework.lang.Nullable;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.util.TypeUtils;\n\n/**\n * Spring AOP advice wrapping an AspectJ after-returning advice method.\n *\n * @author Rod Johnson\n * @author Juergen Hoeller\n * @author Ramnivas Laddad\n * @since 2.0\n */\n@SuppressWarnings(\"serial\")\npublic class AspectJAfterReturningAdvice extends AbstractAspectJAdvice\n\t\timplements AfterReturningAdvice, AfterAdvice, Serializable {\n\n\tpublic AspectJAfterReturningAdvice(\n\t\t\tMethod aspectJBeforeAdviceMethod, AspectJExpressionPointcut pointcut, AspectInstanceFactory aif) {\n\n\t\tsuper(aspectJBeforeAdviceMethod, pointcut, aif);\n\t}\n\n\n\t@Override\n\tpublic boolean isBeforeAdvice() {\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic boolean isAfterAdvice() {\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic void setReturningName(String name) {\n\t\tsetReturningNameNoCheck(name);\n\t}\n\n\t@Override\n\tpublic void afterReturning(@Nullable Object returnValue, Method method, Object[] args, @Nullable Object target) throws Throwable {\n\t\tif (shouldInvokeOnReturnValueOf(method, returnValue)) {\n\t\t\tinvokeAdviceMethod(getJoinPointMatch(), returnValue, null);\n\t\t}\n\t}\n\n\n\t/**\n\t * Following AspectJ semantics, if a returning clause was specified, then the\n\t * advice is only invoked if the returned value is an instance of the given\n\t * returning type and generic type parameters, if any, match the assignment\n\t * rules. If the returning type is Object, the advice is *always* invoked.\n\t * @param returnValue the return value of the target method\n\t * @return whether to invoke the advice method for the given return value\n\t */\n\tprivate boolean shouldInvokeOnReturnValueOf(Method method, @Nullable Object returnValue) {\n\t\tClass<?> type = getDiscoveredReturningType();\n\t\tType genericType = getDiscoveredReturningGenericType();\n\t\t// If we aren't dealing with a raw type, check if generic parameters are assignable.\n\t\treturn (matchesReturnValue(type, method, returnValue) &&\n\t\t\t\t(genericType == null || genericType == type ||\n\t\t\t\t\t\tTypeUtils.isAssignable(genericType, method.getGenericReturnType())));\n\t}\n\n\t/**\n\t * Following AspectJ semantics, if a return value is null (or return type is void),\n\t * then the return type of target method should be used to determine whether advice\n\t * is invoked or not. Also, even if the return type is void, if the type of argument\n\t * declared in the advice method is Object, then the advice must still get invoked.\n\t * @param type the type of argument declared in advice method\n\t * @param method the advice method\n\t * @param returnValue the return value of the target method\n\t * @return whether to invoke the advice method for the given return value and type\n\t */\n<fim_suffix>\tprivate boolean matchesReturnValue(Class<?> type, Method method, @Nullable Object returnValue) {\n\t\tif (returnValue != null) {\n\t\t\treturn ClassUtils.isAssignableValue(type, returnValue);\n\t\t}\n\t\telse if (Object.class == type && void.class == method.getReturnType()) {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn ClassUtils.isAssignable(type, method.getReturnType());\n\t\t}\n\t}\n\n}<fim_middle>// function below has no smell\n"}