{"text": "<fim_prefix>            }\n            pushFollow(FOLLOW_1);\n            ruleXSwitchExpression();\n            state._fsp--;\n            if (state.failed) return ;\n            if ( state.backtracking==0 ) {\n               after(grammarAccess.getXSwitchExpressionRule()); \n            }\n            match(input,EOF,FOLLOW_2); if (state.failed) return ;\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }\n    // $ANTLR end \"entryRuleXSwitchExpression\"\n    // $ANTLR start \"ruleXSwitchExpression\"\n    // InternalEntities.g:1092:1: ruleXSwitchExpression : ( ( rule__XSwitchExpression__Group__0 ) ) ;\n    public final void ruleXSwitchExpression() throws RecognitionException {\n        \t\tint stackSize = keepStackSize();\n        try {\n            // InternalEntities.g:1096:2: ( ( ( rule__XSwitchExpression__Group__0 ) ) )\n            // InternalEntities.g:1097:2: ( ( rule__XSwitchExpression__Group__0 ) )\n            {\n            // InternalEntities.g:1097:2: ( ( rule__XSwitchExpression__Group__0 ) )\n            // InternalEntities.g:1098:3: ( rule__XSwitchExpression__Group__0 )\n            {\n            if ( state.backtracking==0 ) {\n               before(grammarAccess.getXSwitchExpressionAccess().getGroup()); \n            }\n            // InternalEntities.g:1099:3: ( rule__XSwitchExpression__Group__0 )\n            // InternalEntities.g:1099:4: rule__XSwitchExpression__Group__0\n            {\n            pushFollow(FOLLOW_2);\n            rule__XSwitchExpression__Group__0();\n            state._fsp--;\n            if (state.failed) return ;\n            }\n            if ( state.backtracking==0 ) {\n               after(grammarAccess.getXSwitchExpressionAccess().getGroup()); \n            }\n            }\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n            \trestoreStackSize(stackSize);\n        }\n        return ;\n    }\n    // $ANTLR end \"ruleXSwitchExpression\"\n    // $ANTLR start \"entryRuleXCasePart\"\n    // InternalEntities.g:1108:1: entryRuleXCasePart : ruleXCasePart EOF ;\n    public final void entryRuleXCasePart() throws RecognitionException {\n        try {\n            // InternalEntities.g:1109:1: ( ruleXCasePart EOF )\n            // InternalEntities.g:1110:1: ruleXCasePart EOF\n            {\n            if ( state.backtracking==0 ) {\n               before(grammarAccess.getXCasePartRule()); \n            }\n            pushFollow(FOLLOW_1);\n            ruleXCasePart();\n            state._fsp--;\n            if (state.failed) return ;\n            if ( state.backtracking==0 ) {\n               after(grammarAccess.getXCasePartRule()); \n            }\n            match(input,EOF,FOLLOW_2); if (state.failed) return ;\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }\n    // $ANTLR end \"entryRuleXCasePart\"\n    // $ANTLR start \"ruleXCasePart\"\n    // InternalEntities.g:1117:1: ruleXCasePart : ( ( rule__XCasePart__Group__0 ) ) ;\n    public final void ruleXCasePart() throws RecognitionException {\n        \t\tint stackSize = keepStackSize();\n        try {\n            // InternalEntities.g:1121:2: ( ( ( rule__XCasePart__Group__0 ) ) )\n            // InternalEntities.g:1122:2: ( ( rule__XCasePart__Group__0 ) )\n            {\n            // InternalEntities.g:1122:2: ( ( rule__XCasePart__Group__0 ) )\n            // InternalEntities.g:1123:3: ( rule__XCasePart__Group__0 )\n            {\n            if ( state.backtracking==0 ) {\n               before(grammarAccess.getXCasePartAccess().getGroup()); \n            }\n            // InternalEntities.g:1124:3: ( rule__XCasePart__Group__0 )\n            // InternalEntities.g:1124:4: rule__XCasePart__Group__0\n            {\n            pushFollow(FOLLOW_2);\n            rule__XCasePart__Group__0();\n            state._fsp--;\n            if (state.failed) return ;\n            }\n            if ( state.backtracking==0 ) {\n               after(grammarAccess.getXCasePartAccess().getGroup()); \n            }\n            }\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n            \trestoreStackSize(stackSize);\n        }\n        return ;\n    }\n    // $ANTLR end \"ruleXCasePart\"\n    // $ANTLR start \"entryRuleXForLoopExpression\"\n    // InternalEntities.g:1133:1: entryRuleXForLoopExpression : ruleXForLoopExpression EOF ;\n    public final void entryRuleXForLoopExpression() throws RecognitionException {\n        try {\n            // InternalEntities.g:1134:1: ( ruleXForLoopExpression EOF )\n            // InternalEntities.g:1135:1: ruleXForLoopExpression EOF\n            {\n            if ( state.backtracking==0 ) {\n               before(grammarAccess.getXForLoopExpressionRule()); \n            }\n            pushFollow(FOLLOW_1);\n            ruleXForLoopExpression();\n            state._fsp--;\n            if (state.failed) return ;\n            if ( state.backtracking==0 ) {\n               after(grammarAccess.getXForLoopExpressionRule()); \n            }\n            match(input,EOF,FOLLOW_2); if (state.failed) return ;\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }\n    // $ANTLR end \"entryRuleXForLoopExpression\"\n    // $ANTLR start \"ruleXForLoopExpression\"\n    // InternalEntities.g:1142:1: ruleXForLoopExpression : ( ( rule__XForLoopExpression__Group__0 ) ) ;\n    public final void ruleXForLoopExpression() throws RecognitionException {\n        \t\tint stackSize = keepStackSize();\n        try {\n            // InternalEntities.g:1146:2: ( ( ( rule__XForLoopExpression__Group__0 ) ) )\n            // InternalEntities.g:1147:2: ( ( rule__XForLoopExpression__Group__0 ) )\n            {\n            // InternalEntities.g:1147:2: ( ( rule__XForLoopExpression__Group__0 ) )\n            // InternalEntities.g:1148:3: ( rule__XForLoopExpression__Group__0 )\n            {\n            if ( state.backtracking==0 ) {\n               before(grammarAccess.getXForLoopExpressionAccess().getGroup()); \n            }\n            // InternalEntities.g:1149:3: ( rule__XForLoopExpression__Group__0 )\n            // InternalEntities.g:1149:4: rule__XForLoopExpression__Group__0\n            {\n            pushFollow(FOLLOW_2);\n            rule__XForLoopExpression__Group__0();\n            state._fsp--;\n            if (state.failed) return ;\n            }\n            if ( state.backtracking==0 ) {\n               after(grammarAccess.getXForLoopExpressionAccess().getGroup()); \n            }\n            }\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n            \trestoreStackSize(stackSize);\n        }\n        return ;\n    }\n    // $ANTLR end \"ruleXForLoopExpression\"\n    // $ANTLR start \"entryRuleXBasicForLoopExpression\"\n    // InternalEntities.g:1158:1: entryRuleXBasicForLoopExpression : ruleXBasicForLoopExpression EOF ;\n<fim_suffix>    public final void entryRuleXBasicForLoopExpression() throws RecognitionException {\n        try {\n            // InternalEntities.g:1159:1: ( ruleXBasicForLoopExpression EOF )\n            // InternalEntities.g:1160:1: ruleXBasicForLoopExpression EOF\n            {\n            if ( state.backtracking==0 ) {\n               before(grammarAccess.getXBasicForLoopExpressionRule()); \n            }\n            pushFollow(FOLLOW_1);\n            ruleXBasicForLoopExpression();\n            state._fsp--;\n            if (state.failed) return ;\n            if ( state.backtracking==0 ) {\n               after(grammarAccess.getXBasicForLoopExpressionRule()); \n            }\n            match(input,EOF,FOLLOW_2); if (state.failed) return ;\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }<fim_middle>// function below is long method\n"}