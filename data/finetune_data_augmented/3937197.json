{"text": "<fim_prefix>/**\n *  Licensed to the Apache Software Foundation (ASF) under one or more\n *  contributor license agreements.  See the NOTICE file distributed with\n *  this work for additional information regarding copyright ownership.\n *  The ASF licenses this file to You under the Apache License, Version 2.0\n *  (the \"License\"); you may not use this file except in compliance with\n *  the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage org.apache.aries.blueprint.spring;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.apache.aries.blueprint.ComponentDefinitionRegistry;\nimport org.apache.aries.blueprint.services.ExtendedBlueprintContainer;\nimport org.osgi.service.blueprint.container.NoSuchComponentException;\nimport org.osgi.service.blueprint.container.ReifiedType;\nimport org.osgi.service.blueprint.reflect.BeanArgument;\nimport org.osgi.service.blueprint.reflect.BeanMetadata;\nimport org.osgi.service.blueprint.reflect.BeanProperty;\nimport org.osgi.service.blueprint.reflect.ComponentMetadata;\nimport org.osgi.service.blueprint.reflect.Metadata;\nimport org.osgi.service.blueprint.reflect.RefMetadata;\nimport org.osgi.service.blueprint.reflect.Target;\nimport org.osgi.service.blueprint.reflect.ValueMetadata;\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanDefinitionStoreException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanNotOfRequiredTypeException;\nimport org.springframework.beans.factory.NoSuchBeanDefinitionException;\nimport org.springframework.beans.factory.config.BeanDefinition;\nimport org.springframework.beans.factory.support.DefaultListableBeanFactory;\nimport org.springframework.core.ResolvableType;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.ResourceLoader;\n\npublic class BlueprintBeanFactory extends DefaultListableBeanFactory implements ResourceLoader {\n\n    private final ExtendedBlueprintContainer container;\n    private final ResourceLoader resourceLoader;\n\n    public BlueprintBeanFactory(ExtendedBlueprintContainer container, ResourceLoader resourceLoader) {\n        super(new WrapperBeanFactory(container));\n        this.container = container;\n        this.resourceLoader = resourceLoader;\n    }\n\n    @Override\n    public <T> T getBean(Class<T> requiredType) throws BeansException {\n        return super.getBean(requiredType);\n    }\n\n    @Override\n    public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) throws BeanDefinitionStoreException {\n        ComponentDefinitionRegistry registry = container.getComponentDefinitionRegistry();\n        ComponentMetadata metadata = registry.getComponentDefinition(beanName);\n        if (metadata != null && !(metadata instanceof SpringMetadata)) {\n            throw new BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,\n                    \"Cannot register bean definition [\" + beanDefinition + \"] for bean '\" + beanName +\n                            \"': There is already bound.\");\n        }\n        super.registerBeanDefinition(beanName, beanDefinition);\n        if (!beanDefinition.isAbstract()) {\n            registry.registerComponentDefinition(new SpringMetadata(beanName));\n        }\n    }\n\n    @Override\n    public void removeBeanDefinition(String beanName) throws NoSuchBeanDefinitionException {\n        super.removeBeanDefinition(beanName);\n    }\n\n    @Override\n    public Resource getResource(String location) {\n        return resourceLoader.getResource(location);\n    }\n\n    @Override\n    public ClassLoader getClassLoader() {\n        return resourceLoader.getClassLoader();\n    }\n\n<fim_suffix>    public class SpringMetadata implements BeanMetadata {\n        private final String beanName;\n\n        public SpringMetadata(String beanName) {\n            this.beanName = beanName;\n        }\n\n        public BeanDefinition getDefinition() {\n            return getBeanDefinition(beanName);\n        }\n\n        @Override\n        public String getId() {\n            return beanName;\n        }\n\n        @Override\n        public String getScope() {\n            return getDefinition().isSingleton() ? SCOPE_SINGLETON : SCOPE_PROTOTYPE;\n        }\n\n        @Override\n        public int getActivation() {\n            return getDefinition().isLazyInit() ? ACTIVATION_LAZY : ACTIVATION_EAGER;\n        }\n\n        @Override\n        public List<String> getDependsOn() {\n            String[] dependson = getDefinition().getDependsOn();\n            return dependson != null ? Arrays.asList(dependson) : Collections.<String>emptyList();\n        }\n\n        @Override\n        public String getClassName() {\n            return null;\n        }\n\n        @Override\n        public String getInitMethod() {\n            return null;\n        }\n\n        @Override\n        public String getDestroyMethod() {\n            return null;\n        }\n\n        @Override\n        public List<BeanArgument> getArguments() {\n            return Collections.<BeanArgument>singletonList(new BeanArgument() {\n                @Override\n                public Metadata getValue() {\n                    return new ValueMetadata() {\n                        @Override\n                        public String getStringValue() {\n                            return beanName;\n                        }\n                        @Override\n                        public String getType() {\n                            return null;\n                        }\n                    };\n                }\n                @Override\n                public String getValueType() {\n                    return null;\n                }\n                @Override\n                public int getIndex() {\n                    return -1;\n                }\n            });\n        }\n\n        @Override\n        public List<BeanProperty> getProperties() {\n            return Collections.emptyList();\n        }\n\n        @Override\n        public String getFactoryMethod() {\n            return \"getBean\";\n        }\n\n        @Override\n        public Target getFactoryComponent() {\n            return new RefMetadata() {\n                @Override\n                public String getComponentId() {\n                    return BlueprintNamespaceHandler.SPRING_BEAN_FACTORY_ID;\n                }\n            };\n        }\n    }\n\n\n    static class WrapperBeanFactory implements BeanFactory {\n\n        private final ExtendedBlueprintContainer container;\n\n        public WrapperBeanFactory(ExtendedBlueprintContainer container) {\n            this.container = container;\n        }\n\n        @Override\n        public Object getBean(String name) throws BeansException {\n            try {\n                return container.getComponentInstance(name);\n            } catch (NoSuchComponentException e) {\n                throw new NoSuchBeanDefinitionException(name);\n            }\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        @Override\n        public <T> T getBean(String name, Class<T> requiredType) throws BeansException {\n            Object bean = getBean(name);\n            if (requiredType != null && bean != null && !requiredType.isAssignableFrom(bean.getClass())) {\n                try {\n                    bean = container.getConverter().convert(bean, new ReifiedType(requiredType));\n                } catch (Exception ex) {\n                    throw new BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());\n                }\n            }\n            return (T) bean;\n        }\n\n        @Override\n        public <T> T getBean(Class<T> requiredType) throws BeansException {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public Object getBean(String name, Object... args) throws BeansException {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public <T> T getBean(Class<T> requiredType, Object... args) throws BeansException {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public boolean containsBean(String name) {\n            return container.getComponentIds().contains(name);\n        }\n\n        @Override\n        public boolean isSingleton(String name) throws NoSuchBeanDefinitionException {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public boolean isPrototype(String name) throws NoSuchBeanDefinitionException {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public Class<?> getType(String name) throws NoSuchBeanDefinitionException {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public String[] getAliases(String name) {\n            throw new UnsupportedOperationException();\n        }\n    }\n}<fim_middle>// class below has no smell\n"}