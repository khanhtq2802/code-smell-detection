{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ambari.server.orm.dao;\n\nimport java.util.List;\n\nimport javax.persistence.EntityManager;\n\nimport org.apache.ambari.server.orm.RequiresSession;\nimport org.apache.ambari.server.orm.entities.HostStateEntity;\n\nimport com.google.inject.Inject;\nimport com.google.inject.Provider;\nimport com.google.inject.Singleton;\nimport com.google.inject.persist.Transactional;\n\n<fim_suffix>@Singleton\npublic class HostStateDAO {\n  @Inject\n  Provider<EntityManager> entityManagerProvider;\n  @Inject\n  DaoUtils daoUtils;\n\n\n  @RequiresSession\n  public HostStateEntity findByHostId(Long hostId) {\n    return entityManagerProvider.get().find(HostStateEntity.class, hostId);\n  }\n\n  @RequiresSession\n  public List<HostStateEntity> findAll() {\n    return daoUtils.selectAll(entityManagerProvider.get(), HostStateEntity.class);\n  }\n\n  @Transactional\n  public void refresh(HostStateEntity hostStateEntity) {\n    entityManagerProvider.get().refresh(hostStateEntity);\n  }\n\n  @Transactional\n  public void create(HostStateEntity hostStateEntity) {\n    entityManagerProvider.get().persist(hostStateEntity);\n  }\n\n  @Transactional\n  public HostStateEntity merge(HostStateEntity hostStateEntity) {\n    return entityManagerProvider.get().merge(hostStateEntity);\n  }\n\n  @Transactional\n  public void remove(HostStateEntity hostStateEntity) {\n    entityManagerProvider.get().remove(merge(hostStateEntity));\n  }\n\n  @Transactional\n  public void removeByHostId(Long hostId) {\n    remove(findByHostId(hostId));\n  }\n\n}<fim_middle>// class below has no smell\n"}