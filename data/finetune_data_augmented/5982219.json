{"text": "<fim_prefix>/*\n * Copyright 2010-2012 Amazon Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at:\n *\n *    http://aws.amazon.com/apache2.0\n *\n * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n * OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.amazonaws.eclipse.core.ui;\n\n/**\n * Thread with running and canceled information, meant for background tasks\n * where the work will often be discarded and restarted. Subclasses should make\n * sure to set isRunning to false when their work is done, and to not do any\n * potentially conflicting work if isCanceled is true.\n */\n<fim_suffix>public abstract class CancelableThread extends Thread {\n\n    protected boolean running = true;\n    protected boolean canceled = false;\n\n    public synchronized final boolean isRunning() {\n        return running;\n    }\n\n    public synchronized final void setRunning(boolean running) {\n        this.running = running;\n    }\n\n    /**\n     * Subclasses shouldn't do any potentially conflicting UI work before\n     * checking to see if the thread has been canceled.\n     */\n    public synchronized final boolean isCanceled() {\n        return canceled;\n    }\n\n    public synchronized final void cancel() {\n        this.canceled = true;\n    }\n\n    /**\n     * Cancels the thread given if it's running.\n     */\n    public static void cancelThread(CancelableThread thread) {\n        if ( thread != null ) {\n            synchronized ( thread ) {\n                if ( thread.isRunning() ) {\n                    thread.cancel();\n                }\n            }\n        }\n    }\n\n}<fim_middle>// class below has no smell\n"}