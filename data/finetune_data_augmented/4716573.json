{"text": "<fim_prefix>                }\n            }\n            return convertNull(m);\n        }\n        public Boolean nullValue() {\n            return Boolean.FALSE;\n        }\n    }\n    public static class ByteType extends PrimitiveType<Byte> {\n        private static final String name = \"byte\".intern();\n        private ByteType() {\n            super(name, null);\n        }\n        @Override\n        public Byte convert(Object val, Multiplicity m) throws AtlasException {\n            if (val != null) {\n                if (val instanceof Byte) {\n                    return (Byte) val;\n                } else if (val instanceof String) {\n                    return Byte.parseByte((String) val);\n                } else if (val instanceof Number) {\n                    return ((Number) val).byteValue();\n                } else {\n                    throw new ValueConversionException(this, val);\n                }\n            }\n            return convertNull(m);\n        }\n        public Byte nullValue() {\n            return 0;\n        }\n        @Override\n        public void updateSignatureHash(MessageDigest digester, Object val) throws AtlasException {\n            if ( val != null ) {\n                digester.update((Byte) val);\n            }\n        }\n    }\n    public static class ShortType extends PrimitiveType<Short> {\n        private static final String name = \"short\".intern();\n        private ShortType() {\n            super(name, null);\n        }\n        @Override\n        public Short convert(Object val, Multiplicity m) throws AtlasException {\n            if (val != null) {\n                if (val instanceof Short) {\n                    return (Short) val;\n                } else if (val instanceof String) {\n                    return Short.parseShort((String) val);\n                } else if (val instanceof Number) {\n                    return ((Number) val).shortValue();\n                } else {\n                    throw new ValueConversionException(this, val);\n                }\n            }\n            return convertNull(m);\n        }\n        public Short nullValue() {\n            return 0;\n        }\n    }\n    public static class IntType extends PrimitiveType<Integer> {\n        private static final String name = \"int\".intern();\n        private IntType() {\n            super(name, null);\n        }\n        @Override\n        public Integer convert(Object val, Multiplicity m) throws AtlasException {\n            if (val != null) {\n                if (val instanceof Integer) {\n                    return (Integer) val;\n                } else if (val instanceof String) {\n                    return Integer.parseInt((String) val);\n                } else if (val instanceof Number) {\n                    return ((Number) val).intValue();\n                } else {\n                    throw new ValueConversionException(this, val);\n                }\n            }\n            return convertNull(m);\n        }\n        public Integer nullValue() {\n            return 0;\n        }\n    }\n    public static class LongType extends PrimitiveType<Long> {\n        private static final String name = \"long\".intern();\n        private LongType() {\n            super(name, null);\n        }\n        @Override\n        public Long convert(Object val, Multiplicity m) throws AtlasException {\n            if (val != null) {\n                if (val instanceof Long) {\n                    return (Long) val;\n                } else if (val instanceof String) {\n                    return Long.parseLong((String) val);\n                } else if (val instanceof Number) {\n                    return ((Number) val).longValue();\n                } else {\n                    throw new ValueConversionException(this, val);\n                }\n            }\n            return convertNull(m);\n        }\n        public Long nullValue() {\n            return 0L;\n        }\n    }\n    public static class FloatType extends PrimitiveType<Float> {\n        private static final String name = \"float\".intern();\n        private FloatType() {\n            super(name, null);\n        }\n        @Override\n        public Float convert(Object val, Multiplicity m) throws AtlasException {\n            if (val != null) {\n                if (val instanceof Float) {\n                    return (Float) val;\n                } else if (val instanceof String) {\n                    return Float.parseFloat((String) val);\n                } else if (val instanceof Number) {\n                    return ((Number) val).floatValue();\n                } else {\n                    throw new ValueConversionException(this, val);\n                }\n            }\n            return convertNull(m);\n        }\n        public Float nullValue() {\n            return 0.0f;\n        }\n    }\n    public static class DoubleType extends PrimitiveType<Double> {\n        private static final String name = \"double\".intern();\n        private DoubleType() {\n            super(name, null);\n        }\n        @Override\n        public Double convert(Object val, Multiplicity m) throws AtlasException {\n            if (val != null) {\n                if (val instanceof Double) {\n                    return (Double) val;\n                } else if (val instanceof String) {\n                    return Double.parseDouble((String) val);\n                } else if (val instanceof Number) {\n                    return ((Number) val).doubleValue();\n                } else {\n                    throw new ValueConversionException(this, val);\n                }\n            }\n            return convertNull(m);\n        }\n        public Double nullValue() {\n            return 0.0;\n        }\n    }\n    public static class BigIntegerType extends PrimitiveType<BigInteger> {\n        private static final String name = \"biginteger\".intern();\n        private BigIntegerType() {\n            super(name, null);\n        }\n        @Override\n        public BigInteger convert(Object val, Multiplicity m) throws AtlasException {\n            if (val != null) {\n                if (val instanceof BigInteger) {\n                    return (BigInteger) val;\n                } else if (val instanceof String) {\n                    try {\n                        return new BigInteger((String) val);\n                    } catch (NumberFormatException ne) {\n                        throw new ValueConversionException(this, val, ne);\n                    }\n                } else if (val instanceof Number) {\n                    return BigInteger.valueOf(((Number) val).longValue());\n                } else if (val instanceof BigDecimal) {\n                    return ((BigDecimal) val).toBigInteger();\n                } else {\n                    throw new ValueConversionException(this, val);\n                }\n            }\n            return convertNull(m);\n        }\n        public BigInteger nullValue() {\n            return null;\n        }\n    }\n    public static class BigDecimalType extends PrimitiveType<BigDecimal> {\n        private static final String name = \"bigdecimal\".intern();\n        private BigDecimalType() {\n            super(name, null);\n        }\n        @Override\n        public BigDecimal convert(Object val, Multiplicity m) throws AtlasException {\n            if (val != null) {\n                if (val instanceof BigDecimal) {\n                    return (BigDecimal) val;\n                } else if (val instanceof String) {\n                    try {\n                        return new BigDecimal((String) val);\n                    } catch (NumberFormatException ne) {\n                        throw new ValueConversionException(this, val, ne);\n                    }\n                } else if (val instanceof Number) {\n                    return new BigDecimal(((Number) val).doubleValue());\n                } else if (val instanceof BigInteger) {\n                    return new BigDecimal((BigInteger) val);\n                } else {\n                    throw new ValueConversionException(this, val);\n                }\n            }\n            return convertNull(m);\n        }\n        public BigDecimal nullValue() {\n            return null;\n        }\n    }\n    public static class DateType extends PrimitiveType<Date> {\n        private static final String name = \"date\".intern();\n        private DateType() {\n            super(name, null);\n        }\n        private static final DateTimeFormatter utcDateFormat = ISODateTimeFormat.dateTime();\n        @Override\n        public Date convert(Object val, Multiplicity m) throws AtlasException {\n            if (val != null) {\n                if (val instanceof Date) {\n                    return (Date) val;\n                } else if (val instanceof String) {\n                    try {\n                        return utcDateFormat.parseDateTime((String)val).toDate();\n                    } catch (Exception ne) {\n                        throw new ValueConversionException(this, val, ne);\n                    }\n                } else if (val instanceof Number) {\n                    return new Date(((Number) val).longValue());\n                } else {\n                    throw new ValueConversionException(this, val);\n                }\n            }\n            return convertNull(m);\n        }\n        @Override\n        public void output(Date val, Appendable buf, String prefix, Set<Date> inProcess) throws AtlasException {\n            TypeUtils.outputVal(val == null ? \"<null>\" : utcDateFormat.print(new DateTime(val).withZone(DateTimeZone.UTC)), buf,\n                    prefix);\n        }\n        public Date nullValue() {\n            return null;\n        }\n    }\n    public static class StringType extends PrimitiveType<String> {\n        private static final String name = \"string\".intern();\n        private StringType() {\n            super(name, null);\n        }\n        @Override\n        public String convert(Object val, Multiplicity m) throws AtlasException {\n            if (val != null && (!(val instanceof String) || StringUtils.isNotEmpty((CharSequence) val))) {\n                return val.toString();\n            }\n            if (m.nullAllowed() && val != null){\n                return val.toString();\n            }\n            return convertNull(m);\n        }\n        public String nullValue() {\n            return null;\n        }\n    }\n    public static class ArrayType extends AbstractDataType<ImmutableCollection<?>> {\n        private IDataType elemType;\n        public ArrayType(IDataType elemType) {\n            super(arrayTypeName(elemType), null);\n            this.elemType = elemType;\n        }\n<fim_suffix>        public IDataType getElemType() {\n            return elemType;\n        }<fim_middle>// function below has no smell\n"}