{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2012 VMWare, Inc.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * https://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     VMWare, Inc. - initial API and implementation\n *******************************************************************************/\npackage org.grails.ide.eclipse.ui.internal.launch;\n\nimport java.io.File;\n\nimport org.eclipse.core.runtime.CoreException;\nimport org.eclipse.debug.core.ILaunch;\nimport org.eclipse.debug.core.ILaunchConfiguration;\nimport org.eclipse.debug.core.ILaunchConfigurationType;\nimport org.eclipse.debug.core.model.IProcess;\nimport org.eclipse.debug.ui.console.IConsole;\nimport org.eclipse.debug.ui.console.IConsoleLineTracker;\nimport org.eclipse.jface.text.BadLocationException;\nimport org.eclipse.jface.text.IRegion;\nimport org.eclipse.ui.console.IHyperlink;\nimport org.grails.ide.eclipse.core.GrailsCoreActivator;\nimport org.grails.ide.eclipse.core.launch.GrailsLaunchArgumentUtils;\n\nimport org.grails.ide.eclipse.ui.internal.utils.WebUiUtils;\n\n/**\n * @author Christian Dupuis\n * @author Andy Clement\n * @author Andrew Eisenberg\n * @author Kris De Volder\n * @since 2.2.0\n */\npublic class GrailsConsoleLineTracker implements IConsoleLineTracker {\n\n    private static final String OR_MARKER = \" or \";\n\n    private static final String RUNNING_MARKER = \"Server running. Browse to \";\n\n\tprivate static final String TEST_PASSED_MARKER = \"Tests PASSED - view reports in \";\n\n\tprivate static final String TEST_FAILED_MARKER_1 = \"Tests FAILED - view reports in \"; //Grails 1.3.X\n\tprivate static final String TEST_FAILED_MARKER_2 = \"Tests FAILED  - view reports in \"; //Grails 2.0.X\n\t\n\t// Typical line: (grails 1.1.1)\n\t// \"Cobertura Code Coverage Complete (view reports in: N:\\workspaces\\grails_play\\gTunes\\test\\reports/cobertura)\"\n\t// Typical line: (grails 1.2m3)\n\t// \"Cobertura Code Coverage Complete (view reports in: target\\test-reports/cobertura)\"\n\tprivate static final String CODE_COVERAGE_MARKER = \"Cobertura Code Coverage Complete (view reports in: \";\n\n\tprivate IConsole console;\n\n\tpublic void init(IConsole console) {\n\t\tthis.console = console;\n\t}\n\n\tpublic void dispose() {\n\t}\n\n\tpublic void lineAppended(IRegion line) {\n\t\tIProcess process = console.getProcess();\n\t\tILaunch launch = process.getLaunch();\n\t\tILaunchConfiguration launchConfiguration = launch.getLaunchConfiguration();\n\n\t\tif (launchConfiguration != null && isGrailsLaunch(launchConfiguration)) {\n\t\t\ttry {\n\t\t\t\tint offset = line.getOffset();\n\t\t\t\tint length = line.getLength();\n\n\t\t\t\t// open in browser hyperlink\n\t\t\t\t// if run-app --https, then there are 2 hyperlinks, check for that.\n\t\t\t\tString lineStr = console.getDocument().get(offset, length);\n\t\t\t\tString projectBaseDir = \"\";\n\t\t\t\ttry {\n\t\t\t\t\tprojectBaseDir = launchConfiguration.getAttribute(GrailsLaunchArgumentUtils.PROJECT_DIR_LAUNCH_ATTR, \"\");\n\t\t\t\t} catch (CoreException e) {\n\t\t\t\t\t// ignore for now\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcreateRunAppHyperlink(lineStr, line.getOffset());\n\t\t\t\tcreateResultsHyperlink(TEST_PASSED_MARKER, lineStr, line.getOffset(), projectBaseDir);\n\t\t\t\tcreateResultsHyperlink(TEST_FAILED_MARKER_1, lineStr, line.getOffset(), projectBaseDir);\n\t\t\t\tcreateResultsHyperlink(TEST_FAILED_MARKER_2, lineStr, line.getOffset(), projectBaseDir);\n\t\t\t\tcreateResultsHyperlink(CODE_COVERAGE_MARKER, lineStr, line.getOffset(), projectBaseDir);\n\n\t\t\t} catch (BadLocationException ex) {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t}\n\t}\n\n    /**\n     * @param lineNum\n     * @param lineStr\n     */\n    protected void createRunAppHyperlink(String lineStr, int lineOffset) {\n        int runningMarkerIndex = lineStr.indexOf(RUNNING_MARKER);\n        if (runningMarkerIndex >= 0) {\n            int startFirst = runningMarkerIndex + RUNNING_MARKER.length();\n        \tint endFirst = lineStr.indexOf(OR_MARKER, startFirst);\n        \tint startSecond;\n        \tint endSecond;\n        \tif (endFirst >= 0) {\n        \t    startSecond = endFirst + OR_MARKER.length();\n        \t    endSecond = lineStr.length();\n        \t} else {\n        \t    startSecond = -1;\n        \t    endSecond = -1;\n        \t    endFirst = lineStr.length();\n        \t}\n        \t\n        \tif (startFirst >= 0) {\n        \t    // add the http url\n        \t    String url = lineStr.substring(startFirst, endFirst).trim();\n        \t\tGrailsHyperLink link = new GrailsHyperLink(url);\n        \t\tconsole.addLink(link, lineOffset + startFirst, url.length());\n        \t\tif (startSecond >= 0) {\n                    // add the https url\n                    url = lineStr.substring(startSecond, endSecond).trim();\n                    link = new GrailsHyperLink(url);\n                    console.addLink(link, lineOffset + startSecond, url.length());\n        \t\t}\n        \t}\n        }\n    }\n\n\tprotected void createResultsHyperlink(String marker, String text, int offset, String baseDir) {\n\t\tint index = text.indexOf(marker);\n\t\tif (index >= 0) {\n\t\t    int parenIndex = text.indexOf(')', index);\n\t\t    int end = parenIndex > 0 ? parenIndex : text.length();\n\t\t\tint beg = marker.length()+index;\n\t\t\tString path = text.substring(beg, end);\n\t\t\tString subFolder = marker.equals(CODE_COVERAGE_MARKER) ? \"\" : File.separator + \"html\";\n            String url = \"file:\" + toAbsolute(path, baseDir) + subFolder + File.separator + \"index.html\";\n            GrailsHyperLink link = new GrailsHyperLink(url);\n            console.addLink(link, offset + beg, path.length());\n\t\t}\n\t}\n\n\t/**\n\t * Poor first stab at detecting whether a path is relative and making it absolute.\n\t * \n\t * @param path the path that may or may not be relative\n\t * @param prefix the prefix to prepend to the path if it proves to be relative\n\t * @return the absolute path\n\t */\n\tprivate String toAbsolute(String path, String prefix) {\n\t\tif (path.length() > 1 && path.charAt(1) == ':') {\n\t\t\t// windows drive qualifier\n\t\t} else {\n\t\t\tif (path.length() > 0 && path.charAt(0) != File.separatorChar) {\n\t\t\t\treturn prefix + File.separator + path;\n\t\t\t}\n\t\t}\n\t\treturn path;\n\t}\n\n<fim_suffix>\tprivate boolean isGrailsLaunch(ILaunchConfiguration launchConfiguration) {\n\t\ttry {\n\t\t\tILaunchConfigurationType type = launchConfiguration.getType();\n\t\t\treturn GrailsCoreActivator.PLUGIN_ID.equals(type.getPluginIdentifier());\n\t\t} catch (CoreException ex) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic class GrailsHyperLink implements IHyperlink {\n\n\t\tprivate final String url;\n\n\t\tpublic GrailsHyperLink(String url) {\n\t\t\tthis.url = url;\n\t\t}\n\n\t\tpublic void linkActivated() {\n\t\t\tWebUiUtils.openUrl(url);\n\t\t}\n\n\t\tpublic void linkEntered() {\n\t\t}\n\n\t\tpublic void linkExited() {\n\t\t}\n\t\tpublic String getUrl() {\n            return url;\n        }\n\t}\n}<fim_middle>// function below has no smell\n"}