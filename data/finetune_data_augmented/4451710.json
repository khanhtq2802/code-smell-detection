{"text": "<fim_prefix>    this.owner = table.getOwner();\n    this.createTime = table.getCreateTime();\n    this.lastAccessTime = table.getLastAccessTime();\n    this.retention = table.getRetention();\n    this.sd = new StorageDescriptorWrapper(table.getSd());\n    this.partitionKeys = Lists.newArrayList();\n    for (FieldSchema f : table.getPartitionKeys()) {\n      this.partitionKeys.add(new FieldSchemaWrapper(f));\n      partitionNameTypeMap.put(f.getName(), f.getType());\n    }\n    this.parameters = table.getParameters();\n    this.viewOriginalText = table.getViewOriginalText();\n    this.viewExpandedText = table.getViewExpandedText();\n    this.tableType = table.getTableType();\n    this.columnsCache = new ColumnsCacheWrapper(table.getColumnListsCache());\n  }\n  @JsonIgnore\n  public HiveTableWithColumnCache getTable() {\n    return table;\n  }\n  @JsonIgnore\n  public Map<String, String> getParameters() {\n    return parameters;\n  }\n  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder(\"Table(\");\n    sb.append(\"dbName:\");\n    sb.append(this.dbName);\n    sb.append(\", \");\n    sb.append(\"tableName:\");\n    sb.append(this.tableName);\n    sb.append(\")\");\n    return sb.toString();\n  }\n  /**\n   * Wrapper for {@link Partition} class. Used for serialization and deserialization of {@link HivePartition}.\n   */\n  public static class HivePartitionWrapper {\n    @JsonIgnore\n    private HivePartition partition;\n    @JsonProperty\n    public List<String> values;\n    @JsonProperty\n    public String tableName;\n    @JsonProperty\n    public String dbName;\n    @JsonProperty\n    public int createTime;\n    @JsonProperty\n    public int lastAccessTime;\n    @JsonProperty\n    public StorageDescriptorWrapper sd;\n    @JsonProperty\n    public Map<String, String> parameters;\n    @JsonProperty\n    private int columnListIndex;\n    @JsonCreator\n    public HivePartitionWrapper(@JsonProperty(\"values\") List<String> values, @JsonProperty(\"tableName\") String tableName,\n                                @JsonProperty(\"dbName\") String dbName, @JsonProperty(\"createTime\") int createTime,\n                                @JsonProperty(\"lastAccessTime\") int lastAccessTime, @JsonProperty(\"sd\") StorageDescriptorWrapper sd,\n                                @JsonProperty(\"parameters\") Map<String, String> parameters, @JsonProperty(\"columnListIndex\") int columnListIndex) {\n      this.values = values;\n      this.tableName = tableName;\n      this.dbName = dbName;\n      this.createTime = createTime;\n      this.lastAccessTime = lastAccessTime;\n      this.sd = sd;\n      this.parameters = parameters;\n      this.columnListIndex = columnListIndex;\n      StorageDescriptor sdUnwrapped = sd.getSd();\n      this.partition = new HivePartition(values, tableName, dbName, createTime, lastAccessTime, sdUnwrapped, parameters, columnListIndex);\n    }\n    public HivePartitionWrapper(HivePartition partition) {\n      if (partition == null) {\n        return;\n      }\n      this.partition = partition;\n      this.values = partition.getValues();\n      this.tableName = partition.getTableName();\n      this.dbName = partition.getDbName();\n      this.createTime = partition.getCreateTime();\n      this.lastAccessTime = partition.getLastAccessTime();\n      this.sd = new StorageDescriptorWrapper(partition.getSd());\n      this.parameters = partition.getParameters();\n      this.columnListIndex = partition.getColumnListIndex();\n    }\n    @JsonIgnore\n    public HivePartition getPartition() {\n      return partition;\n    }\n    @Override\n    public String toString() {\n      StringBuilder sb = new StringBuilder(\"Partition(\");\n      sb.append(\"values:\");\n      sb.append(this.values);\n      sb.append(\")\");\n      return sb.toString();\n    }\n  }\n  /**\n   * Wrapper for {@link StorageDescriptor} class.\n   * Used in {@link HivePartitionWrapper} and {@link HiveTableWrapper}\n   * for serialization and deserialization of {@link StorageDescriptor}.\n   */\n  public static class StorageDescriptorWrapper {\n    @JsonIgnore\n    private StorageDescriptor sd;\n    // column lists stored in ColumnListsCache\n    @JsonIgnore\n    public List<FieldSchemaWrapper> columns;\n    @JsonProperty\n    public String location;\n    @JsonProperty\n    public String inputFormat;\n    @JsonProperty\n    public String outputFormat;\n    @JsonProperty\n    public boolean compressed;\n    @JsonProperty\n    public int numBuckets;\n    @JsonProperty\n    public SerDeInfoWrapper serDeInfo;\n    @JsonProperty\n    public List<OrderWrapper> sortCols;\n    @JsonProperty\n    public Map<String, String> parameters;\n    @JsonCreator\n    public StorageDescriptorWrapper(@JsonProperty(\"columns\") List<FieldSchemaWrapper> columns, @JsonProperty(\"location\") String location, @JsonProperty(\"inputFormat\") String inputFormat,\n                                    @JsonProperty(\"outputFormat\") String outputFormat, @JsonProperty(\"compressed\") boolean compressed, @JsonProperty(\"numBuckets\") int numBuckets,\n                                    @JsonProperty(\"serDeInfo\") SerDeInfoWrapper serDeInfo,  @JsonProperty(\"sortCols\") List<OrderWrapper> sortCols,\n                                    @JsonProperty(\"parameters\") Map<String,String> parameters) {\n      this.columns = columns;\n      this.location = location;\n      this.inputFormat = inputFormat;\n      this.outputFormat = outputFormat;\n      this.compressed = compressed;\n      this.numBuckets = numBuckets;\n      this.serDeInfo = serDeInfo;\n      this.sortCols = sortCols;\n      this.parameters = parameters;\n      List<FieldSchema> colsUnwrapped;\n      if (columns != null) {\n        colsUnwrapped = Lists.newArrayList();\n        for (FieldSchemaWrapper fieldSchema : columns) {\n          colsUnwrapped.add(fieldSchema.getFieldSchema());\n        }\n      } else {\n        colsUnwrapped = null;\n      }\n      SerDeInfo serDeInfoUnwrapped = serDeInfo.getSerDeInfo();\n      List<Order> sortColsUnwrapped;\n      if (sortCols != null) {\n        sortColsUnwrapped = Lists.newArrayList();\n        for (OrderWrapper order : sortCols) {\n          sortColsUnwrapped.add(order.getOrder());\n        }\n      } else {\n        sortColsUnwrapped = null;\n      }\n      sd = new StorageDescriptor(colsUnwrapped, location, inputFormat, outputFormat,\n        compressed, numBuckets, serDeInfoUnwrapped, null, sortColsUnwrapped, parameters);\n    }\n    public StorageDescriptorWrapper(StorageDescriptor storageDescriptor) {\n      sd = storageDescriptor;\n      location = storageDescriptor.getLocation();\n      inputFormat = storageDescriptor.getInputFormat();\n      outputFormat = storageDescriptor.getOutputFormat();\n      compressed = storageDescriptor.isCompressed();\n      numBuckets = storageDescriptor.getNumBuckets();\n      serDeInfo = new SerDeInfoWrapper(storageDescriptor.getSerdeInfo());\n      if (sd.getSortCols() != null) {\n        sortCols = Lists.newArrayList();\n        for (Order order : sd.getSortCols()) {\n          sortCols.add(new OrderWrapper(order));\n        }\n      }\n      parameters = storageDescriptor.getParameters();\n      if (sd.getCols() != null) {\n        this.columns = Lists.newArrayList();\n        for (FieldSchema fieldSchema : sd.getCols()) {\n          this.columns.add(new FieldSchemaWrapper(fieldSchema));\n        }\n      }\n    }\n    @JsonIgnore\n    public StorageDescriptor getSd() {\n      return sd;\n    }\n  }\n  public static class SerDeInfoWrapper {\n    @JsonIgnore\n    private SerDeInfo serDeInfo;\n    @JsonProperty\n    public String name;\n    @JsonProperty\n    public String serializationLib;\n    @JsonProperty\n    public Map<String,String> parameters;\n    @JsonCreator\n    public SerDeInfoWrapper(@JsonProperty(\"name\") String name, @JsonProperty(\"serializationLib\") String serializationLib, @JsonProperty(\"parameters\") Map<String, String> parameters) {\n      this.name = name;\n      this.serializationLib = serializationLib;\n      this.parameters = parameters;\n      this.serDeInfo = new SerDeInfo(name, serializationLib, parameters);\n    }\n    public SerDeInfoWrapper(SerDeInfo serDeInfo) {\n      this.serDeInfo = serDeInfo;\n      this.name = serDeInfo.getName();\n      this.serializationLib = serDeInfo.getSerializationLib();\n      this.parameters = serDeInfo.getParameters();\n    }\n    @JsonIgnore\n    public SerDeInfo getSerDeInfo() {\n      return serDeInfo;\n    }\n  }\n<fim_suffix>  public static class FieldSchemaWrapper {\n    @JsonIgnore\n    private FieldSchema fieldSchema;\n    @JsonProperty\n    public String name;\n    @JsonProperty\n    public String type;\n    @JsonProperty\n    public String comment;\n    @JsonCreator\n    public FieldSchemaWrapper(@JsonProperty(\"name\") String name, @JsonProperty(\"type\") String type, @JsonProperty(\"comment\") String comment) {\n      this.name = name;\n      this.type = type;\n      this.comment = comment;\n      this.fieldSchema = new FieldSchema(name, type, comment);\n    }\n    public FieldSchemaWrapper(FieldSchema fieldSchema) {\n      this.fieldSchema = fieldSchema;\n      this.name = fieldSchema.getName();\n      this.type = fieldSchema.getType();\n      this.comment = fieldSchema.getComment();\n    }\n    @JsonIgnore\n    public FieldSchema getFieldSchema() {\n      return fieldSchema;\n    }\n  }<fim_middle>// class below is data class\n"}