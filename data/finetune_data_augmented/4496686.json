{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements. See the NOTICE file distributed with this\n * work for additional information regarding copyright ownership. The ASF\n * licenses this file to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\npackage org.apache.flume.conf.sink;\n\nimport java.util.Set;\n\nimport org.apache.flume.Context;\nimport org.apache.flume.conf.ComponentConfiguration;\nimport org.apache.flume.conf.ConfigurationException;\n\npublic class SinkProcessorConfiguration extends ComponentConfiguration {\n  protected Set<String> sinks;\n\n  protected SinkProcessorConfiguration(String componentName) {\n    super(componentName);\n    setType(\"default\");\n  }\n\n  public void configure(Context context) throws ConfigurationException {\n\n  }\n\n  public Set<String> getSinks() {\n    return sinks;\n  }\n\n  public void setSinks(Set<String> sinks) {\n    this.sinks = sinks;\n  }\n\n  public enum SinkProcessorConfigurationType {\n    /**\n     * Load balancing channel selector\n     */\n    LOAD_BALANCE(\"org.apache.flume.conf.sink.LoadBalancingSinkProcessorConfiguration\"),\n    /**\n     * Failover processor\n     *\n     * @see FailoverSinkProcessor\n     */\n    FAILOVER(\"org.apache.flume.conf.sink.FailoverSinkProcessorConfiguration\"),\n\n    /**\n     * Standard processor\n     *\n     * @see DefaultSinkProcessor\n     */\n    DEFAULT(null);\n    private final String processorClassName;\n\n    private SinkProcessorConfigurationType(String processorClassName) {\n      this.processorClassName = processorClassName;\n    }\n\n    public String getSinkProcessorConfigurationType() {\n      return processorClassName;\n    }\n\n<fim_suffix>    @SuppressWarnings(\"unchecked\")\n    public SinkProcessorConfiguration getConfiguration(String name)\n        throws ConfigurationException {\n      Class<? extends SinkProcessorConfiguration> clazz;\n      SinkProcessorConfiguration instance = null;\n      try {\n        if (processorClassName != null) {\n          clazz =\n              (Class<? extends SinkProcessorConfiguration>) Class\n                  .forName(processorClassName);\n          instance = clazz.getConstructor(String.class).newInstance(name);\n\n        } else {\n          return new SinkProcessorConfiguration(name);\n        }\n      } catch (ClassNotFoundException e) {\n        // Could not find the configuration stub, do basic validation\n        instance = new SinkProcessorConfiguration(name);\n        // Let the caller know that this was created because of this exception.\n        instance.setNotFoundConfigClass();\n      } catch (Exception e) {\n        throw new ConfigurationException(\n            \"Could not instantiate configuration!\", e);\n      }\n      return instance;\n    }\n  }\n\n}<fim_middle>// function below has no smell\n"}