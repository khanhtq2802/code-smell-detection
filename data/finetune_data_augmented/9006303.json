{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.solr.handler.dataimport;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.lang.invoke.MethodHandles;\nimport java.util.Map;\n\n/**\n * A {@link Transformer} implementation which logs messages in a given template format.\n * <p>\n * Refer to <a href=\"http://wiki.apache.org/solr/DataImportHandler\">http://wiki.apache.org/solr/DataImportHandler</a>\n * for more details.\n * <p>\n * <b>This API is experimental and may change in the future.</b>\n *\n * @since solr 1.4\n */\n<fim_suffix>public class LogTransformer extends Transformer {\n  private static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n\n  @Override\n  public Object transformRow(Map<String, Object> row, Context ctx) {\n    String expr = ctx.getEntityAttribute(LOG_TEMPLATE);\n    String level = ctx.replaceTokens(ctx.getEntityAttribute(LOG_LEVEL));\n\n    if (expr == null || level == null) return row;\n\n    if (\"info\".equals(level)) {\n      if (log.isInfoEnabled())\n        log.info(ctx.replaceTokens(expr));\n    } else if (\"trace\".equals(level)) {\n      if (log.isTraceEnabled())\n        log.trace(ctx.replaceTokens(expr));\n    } else if (\"warn\".equals(level)) {\n      if (log.isWarnEnabled())\n        log.warn(ctx.replaceTokens(expr));\n    } else if (\"error\".equals(level)) {\n      if (log.isErrorEnabled())\n        log.error(ctx.replaceTokens(expr));\n    } else if (\"debug\".equals(level)) {\n      if (log.isDebugEnabled())\n        log.debug(ctx.replaceTokens(expr));\n    }\n\n    return row;\n  }\n\n  public static final String LOG_TEMPLATE = \"logTemplate\";\n  public static final String LOG_LEVEL = \"logLevel\";\n}<fim_middle>// class below is blob\n"}