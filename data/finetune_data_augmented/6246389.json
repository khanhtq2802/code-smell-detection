{"text": "<fim_prefix>/**\n * Copyright (c) 2018 Contributors to the Eclipse Foundation\n *\n * See the NOTICE file(s) distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License 2.0 which is available at\n * https://www.eclipse.org/legal/epl-2.0\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n\npackage org.eclipse.hono.adapter.mqtt;\n\nimport java.util.Objects;\n\nimport io.netty.handler.codec.mqtt.MqttQoS;\nimport io.vertx.mqtt.MqttTopicSubscription;\nimport org.eclipse.hono.auth.Device;\nimport org.eclipse.hono.util.CommandConstants;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * The MQTT subscription of devices, to get commands.\n *\n * <p>\n * Format of subscription need to be: {@code control|c/+|TENANT/+|DEVICE_ID/req|q/#} - e.g.:\n * </p>\n * <ol>\n * <li>{@code control/+/+/req/#} - authenticated device and verbose format</li>\n * <li>{@code c/+/+/q/#} - authenticated device with short format</li>\n * <li>{@code control/DEFAULT_TENANT/4711/req/#} unauthenticated device with verbose format</li>\n * </ol>\n */\n<fim_suffix>public class CommandSubscription {\n\n    private static final Logger LOG = LoggerFactory.getLogger(CommandSubscription.class);\n\n    private String endpoint;\n    private String req;\n    private String tenant;\n    private String deviceId;\n    private MqttQoS qos;\n    private String clientId;\n    private String topic;\n    private boolean isAuthenticated;\n\n    private CommandSubscription(final String topic) {\n        Objects.requireNonNull(topic);\n        this.topic = topic;\n        final String[] parts = topic.split(\"\\\\/\");\n        if (parts.length != 5 || !\"#\".equals(parts[4])) {\n            throw new IllegalArgumentException(\"topic filter does not match pattern: control|c/+/+/req|q/#\");\n        }\n        endpoint = parts[0];\n        if (!CommandConstants.isCommandEndpoint(endpoint)) {\n            throw new IllegalArgumentException(\n                    \"the endpoint needs to be '\" + CommandConstants.COMMAND_ENDPOINT + \"' or '\"\n                            + CommandConstants.COMMAND_ENDPOINT_SHORT + \"'\");\n        }\n        req = parts[3];\n        if (!CommandConstants.COMMAND_RESPONSE_REQUEST_PART.equals(req)\n                && !CommandConstants.COMMAND_RESPONSE_REQUEST_PART_SHORT.equals(req)) {\n            throw new IllegalArgumentException(\n                    \"the request part needs to be '\" + CommandConstants.COMMAND_RESPONSE_REQUEST_PART + \"' or '\"\n                            + CommandConstants.COMMAND_RESPONSE_REQUEST_PART_SHORT + \"'\");\n        }\n        if (!\"+\".equals(parts[1])) {\n            tenant = parts[1];\n        }\n        if (!\"+\".equals(parts[2])) {\n            deviceId = parts[2];\n        }\n    }\n\n    private CommandSubscription(final String topic, final Device authenticatedDevice) {\n        this(topic);\n        if (authenticatedDevice == null) {\n            isAuthenticated = false;\n            if (tenant == null || tenant.isEmpty()) {\n                throw new IllegalArgumentException(\n                        \"for unauthenticated devices the tenant needs to be given in the subscription\");\n            }\n            if (deviceId == null || deviceId.isEmpty()) {\n                throw new IllegalArgumentException(\n                        \"for unauthenticated devices the device-id needs to be given in the subscription\");\n            }\n        } else {\n            isAuthenticated = true;\n            if ((tenant != null && !authenticatedDevice.getTenantId().equals(tenant)) ||\n                    (deviceId != null && !authenticatedDevice.getDeviceId().equals(deviceId))) {\n                throw new IllegalArgumentException(\n                        \"for authenticated devices the given device-id and tenant need to match the authentication or be undefined ('+')\");\n            } else {\n                tenant = authenticatedDevice.getTenantId();\n                deviceId = authenticatedDevice.getDeviceId();\n            }\n        }\n    }\n\n    private CommandSubscription(final String topic, final Device authenticatedDevice, final MqttQoS qos, final String clientId) {\n        this(topic, authenticatedDevice);\n        this.qos = qos;\n        this.clientId = clientId;\n    }\n\n    /**\n     * Gets the tenant from topic or authentication .\n     *\n     * @return The tenant.\n     */\n    public String getTenant() {\n        return tenant;\n    }\n\n    /**\n     * Gets the device id from topic or authentication.\n     *\n     * @return The device id.\n     */\n    public String getDeviceId() {\n        return deviceId;\n    }\n\n    /**\n     * Gets the endpoint of the subscription.\n     *\n     * @return The endpoint.\n     */\n    public String getEndpoint() {\n        return endpoint;\n    }\n\n    /**\n     * Gets the QoS of the subscription.\n     *\n     * @return The QoS value.\n     */\n    public MqttQoS getQos() {\n        return qos;\n    }\n\n    /**\n     * Gets the clientId of the Mqtt subscription.\n     *\n     * @return The clientId.\n     */\n    public String getClientId() {\n        return clientId;\n    }\n\n    /**\n     * Gets the subscription topic.\n     *\n     * @return The topic.\n     */\n    public String getTopic() {\n        return topic;\n    }\n\n    /**\n     * Gets the request part of the subscription.\n     *\n     * @return The request part.\n     */\n    public String getRequestPart() {\n        return req;\n    }\n\n    /**\n     * Gets the authentication status, which indicates the need to publish on tenant/device-id for unauthenticated\n     * devices.\n     *\n     * @return {@code true} if created with an authenticated device.\n     */\n    public boolean isAuthenticated() {\n        return isAuthenticated;\n    }\n\n    /**\n     * Creates a command subscription object for the given topic. When the authenticated device is given\n     * it is used to either check given tenant and device-id from topic or fill this\n     * fields if not given.\n     *\n     * @param topic The topic to subscribe for commands.\n     * @param authenticatedDevice The authenticated device or {@code null}.\n     * @return The CommandSubscription object or {@code null} if the topic does not match the rules.\n     * @throws NullPointerException if topic is {@code null}.\n     */\n    public static CommandSubscription fromTopic(final String topic, final Device authenticatedDevice) {\n        try {\n            return new CommandSubscription(topic, authenticatedDevice);\n        } catch (final IllegalArgumentException e) {\n            LOG.debug(e.getMessage());\n            return null;\n        }\n    }\n\n    /**\n     * Creates a command subscription object for the given topic. When the authenticated device is given\n     * it is used to either check given tenant and device-id from topic or fill this\n     * fields if not given.\n     *\n     * @param mqttTopicSub The MqttTopicSubscription request from device for command subscription.\n     * @param authenticatedDevice The authenticated device or {@code null}.\n     * @param clientId The the client identifier as provided by the remote MQTT client.\n     * @return The CommandSubscription object or {@code null} if the topic does not match the rules.\n     * @throws NullPointerException if topic is {@code null}.\n     */\n    public static CommandSubscription fromTopic(final MqttTopicSubscription mqttTopicSub, final Device authenticatedDevice, final String clientId) {\n        try {\n            return new CommandSubscription(mqttTopicSub.topicName(), authenticatedDevice,\n                    mqttTopicSub.qualityOfService(), clientId);\n        } catch (final IllegalArgumentException e) {\n            LOG.debug(e.getMessage());\n            return null;\n        }\n    }\n}<fim_middle>// class below has no smell\n"}