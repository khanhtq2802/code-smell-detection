{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.flink.api.java.typeutils;\n\nimport java.lang.reflect.Array;\n\nimport org.apache.flink.annotation.PublicEvolving;\nimport org.apache.flink.annotation.Public;\nimport org.apache.flink.api.common.ExecutionConfig;\nimport org.apache.flink.api.common.typeinfo.TypeInformation;\nimport org.apache.flink.api.common.typeutils.TypeSerializer;\nimport org.apache.flink.api.common.typeutils.base.GenericArraySerializer;\n\nimport static org.apache.flink.util.Preconditions.checkNotNull;\nimport static org.apache.flink.util.Preconditions.checkArgument;\n\n@Public\npublic class ObjectArrayTypeInfo<T, C> extends TypeInformation<T> {\n\n\tprivate static final long serialVersionUID = 1L;\n\t\n\tprivate final Class<T> arrayType;\n\tprivate final TypeInformation<C> componentInfo;\n\n\tprivate ObjectArrayTypeInfo(Class<T> arrayType, TypeInformation<C> componentInfo) {\n\t\tthis.arrayType = checkNotNull(arrayType);\n\t\tthis.componentInfo = checkNotNull(componentInfo);\n\t}\n\n\t// --------------------------------------------------------------------------------------------\n\n\t@Override\n\t@PublicEvolving\n\tpublic boolean isBasicType() {\n\t\treturn false;\n\t}\n\n\t@Override\n\t@PublicEvolving\n\tpublic boolean isTupleType() {\n\t\treturn false;\n\t}\n\n\t@Override\n\t@PublicEvolving\n\tpublic int getArity() {\n\t\treturn 1;\n\t}\n\n\t@Override\n\t@PublicEvolving\n\tpublic int getTotalFields() {\n\t\treturn 1;\n\t}\n\n<fim_suffix>\t@SuppressWarnings(\"unchecked\")\n\t@Override\n\t@PublicEvolving\n\tpublic Class<T> getTypeClass() {\n\t\treturn arrayType;\n\t}\n\n\t@PublicEvolving\n\tpublic TypeInformation<C> getComponentInfo() {\n\t\treturn componentInfo;\n\t}\n\n\t@Override\n\t@PublicEvolving\n\tpublic boolean isKeyType() {\n\t\treturn false;\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\t@Override\n\t@PublicEvolving\n\tpublic TypeSerializer<T> createSerializer(ExecutionConfig executionConfig) {\n\t\treturn (TypeSerializer<T>) new GenericArraySerializer<C>(\n\t\t\tcomponentInfo.getTypeClass(),\n\t\t\tcomponentInfo.createSerializer(executionConfig));\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn this.getClass().getSimpleName() + \"<\" + this.componentInfo + \">\";\n\t}\n\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (obj instanceof ObjectArrayTypeInfo) {\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tObjectArrayTypeInfo<T, C> objectArrayTypeInfo = (ObjectArrayTypeInfo<T, C>)obj;\n\n\t\t\treturn objectArrayTypeInfo.canEqual(this) &&\n\t\t\t\tarrayType == objectArrayTypeInfo.arrayType &&\n\t\t\t\tcomponentInfo.equals(objectArrayTypeInfo.componentInfo);\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean canEqual(Object obj) {\n\t\treturn obj instanceof ObjectArrayTypeInfo;\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn 31 * this.arrayType.hashCode() + this.componentInfo.hashCode();\n\t}\n\n\t// --------------------------------------------------------------------------------------------\n\n\t@PublicEvolving\n\tpublic static <T, C> ObjectArrayTypeInfo<T, C> getInfoFor(Class<T> arrayClass, TypeInformation<C> componentInfo) {\n\t\tcheckNotNull(arrayClass);\n\t\tcheckNotNull(componentInfo);\n\t\tcheckArgument(arrayClass.isArray(), \"Class \" + arrayClass + \" must be an array.\");\n\n\t\treturn new ObjectArrayTypeInfo<T, C>(arrayClass, componentInfo);\n\t}\n\n\t/**\n\t * Creates a new {@link org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo} from a\n\t * {@link TypeInformation} for the component type.\n\t *\n\t * <p>\n\t * This must be used in cases where the complete type of the array is not available as a\n\t * {@link java.lang.reflect.Type} or {@link java.lang.Class}.\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\t@PublicEvolving\n\tpublic static <T, C> ObjectArrayTypeInfo<T, C> getInfoFor(TypeInformation<C> componentInfo) {\n\t\tcheckNotNull(componentInfo);\n\n\t\treturn new ObjectArrayTypeInfo<T, C>(\n\t\t\t(Class<T>)Array.newInstance(componentInfo.getTypeClass(), 0).getClass(),\n\t\t\tcomponentInfo);\n\t}\n}<fim_middle>// function below has no smell\n"}