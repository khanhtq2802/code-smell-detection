{"text": "<fim_prefix>\n<fim_suffix>public class NetAgent extends Agent {\n    //---------------------navigational members-----------------------------------\n    // All these request objects point to the same physical request object.\n    ConnectionRequestInterface connectionRequest_;\n    StatementRequestInterface statementRequest_;\n    ResultSetRequestInterface resultSetRequest_;\n    // All these reply objects point to the same physical reply object.\n    ConnectionReply connectionReply_;\n    private ConnectionReply packageReply_;\n    StatementReply statementReply_;\n    ResultSetReply resultSetReply_;\n    //---------------------navigational cheat-links-------------------------------\n    // Cheat-links are for convenience only, and are not part of the conceptual model.\n    // Warning:\n    //   Cheat-links should only be defined for invariant state data.\n    //   That is, the state data is set by the constructor and never changes.\n    // Alias for (NetConnection) super.connection\n    NetConnection netConnection_;\n    // Alias for (Request) super.*Request, all in one\n    // In the case of the NET implementation, these all point to the same physical request object.\n    private Request request_;\n    NetConnectionRequest netConnectionRequest_;\n    private NetPackageRequest netPackageRequest_;\n    private NetStatementRequest netStatementRequest_;\n    private NetResultSetRequest netResultSetRequest_;\n    // Alias for (Reply) super.*Reply, all in one.\n    // In the case of the NET implementation, these all point to the same physical reply object.\n    private Reply reply_;\n    NetConnectionReply netConnectionReply_;\n    private NetPackageReply netPackageReply_;\n    private NetStatementReply netStatementReply_;\n    private NetResultSetReply netResultSetReply_;\n    //-----------------------------state------------------------------------------\n    Socket socket_;\n    private InputStream rawSocketInputStream_;\n    private OutputStream rawSocketOutputStream_;\n    String server_;\n    int port_;\n    private int clientSSLMode_;\n    private EbcdicCcsidManager ebcdicCcsidManager_;\n    private Utf8CcsidManager utf8CcsidManager_;\n    private CcsidManager currentCcsidManager_;\n    // TODO: Remove target? Keep just one CcsidManager?\n    //public CcsidManager targetCcsidManager_;\n    Typdef typdef_;\n    Typdef targetTypdef_;\n    Typdef originalTargetTypdef_; // added to support typdef overrides\n    private int svrcod_;\n    int orignalTargetSqlam_ = NetConfiguration.MGRLVL_7;\n    int targetSqlam_ = orignalTargetSqlam_;\n    SqlException exceptionOpeningSocket_ = null;\n    SqlException exceptionConvertingRdbnam = null;\n    /**\n     * Flag which indicates that a writeChain has been started and data sent to\n     * the server.\n     * If true, starting a new write chain will throw a DisconnectException. \n     * It is cleared when the write chain is ended.\n     */\n    private boolean writeChainIsDirty_ = false;\n    //---------------------constructors/finalizer---------------------------------\n    // Only used for testing\n    public NetAgent(NetConnection netConnection,\n                    LogWriter logWriter) throws SqlException {\n        super(netConnection, logWriter);\n        this.netConnection_ = netConnection;\n    }\n    NetAgent(NetConnection netConnection,\n             LogWriter netLogWriter,\n             int loginTimeout,\n             String server,\n             int port,\n             int clientSSLMode) throws SqlException {\n        super(netConnection, netLogWriter);\n        server_ = server;\n        port_ = port;\n        netConnection_ = netConnection;\n        clientSSLMode_ = clientSSLMode;\n        if (server_ == null) {\n            throw new DisconnectException(this, \n                new ClientMessageId(SQLState.CONNECT_REQUIRED_PROPERTY_NOT_SET),\n                \"serverName\");\n        }\n        try {\n            socket_ = (Socket)AccessController.doPrivileged(\n                new OpenSocketAction(server, port, clientSSLMode_));\n        } catch (PrivilegedActionException e) {\n            throw new DisconnectException(this,\n                new ClientMessageId(SQLState.CONNECT_UNABLE_TO_CONNECT_TO_SERVER),\n                e.getException(),\n                e.getException().getClass().getName(), server, port,\n                e.getException().getMessage());\n        }\n        // Set TCP/IP Socket Properties\n        try {\n            if (exceptionOpeningSocket_ == null) {\n                socket_.setTcpNoDelay(true); // disables nagles algorithm\n                socket_.setKeepAlive(true); // PROTOCOL Manual: TCP/IP connection allocation rule #2\n                socket_.setSoTimeout(loginTimeout * 1000);\n            }\n        } catch (SocketException e) {\n            try {\n                socket_.close();\n            } catch (IOException doNothing) {\n            }\n            exceptionOpeningSocket_ = new DisconnectException(this,\n                new ClientMessageId(SQLState.CONNECT_SOCKET_EXCEPTION),\n                e, e.getMessage());\n        }\n        try {\n            if (exceptionOpeningSocket_ == null) {\n                rawSocketOutputStream_ = socket_.getOutputStream();\n                rawSocketInputStream_ = socket_.getInputStream();\n            }\n        } catch (IOException e) {\n            try {\n                socket_.close();\n            } catch (IOException doNothing) {\n            }\n            exceptionOpeningSocket_ = new DisconnectException(this, \n                new ClientMessageId(SQLState.CONNECT_UNABLE_TO_OPEN_SOCKET_STREAM),\n                e, e.getMessage());\n        }\n        ebcdicCcsidManager_ = new EbcdicCcsidManager();\n        utf8CcsidManager_ = new Utf8CcsidManager();\n        currentCcsidManager_ = ebcdicCcsidManager_;\n        if (netConnection_.isXAConnection()) {\n            NetXAConnectionReply netXAConnectionReply_ = new NetXAConnectionReply(this, netConnection_.commBufferSize_);\n            netResultSetReply_ = (NetResultSetReply) netXAConnectionReply_;\n            netStatementReply_ = (NetStatementReply) netResultSetReply_;\n            netPackageReply_ = (NetPackageReply) netStatementReply_;\n            netConnectionReply_ = (NetConnectionReply) netPackageReply_;\n            reply_ = (Reply) netConnectionReply_;\n            resultSetReply_ = new ResultSetReply(this,\n                    netResultSetReply_,\n                    netStatementReply_,\n                    netConnectionReply_);\n            statementReply_ = (StatementReply) resultSetReply_;\n            packageReply_ = (ConnectionReply) statementReply_;\n            connectionReply_ = (ConnectionReply) packageReply_;\n            NetXAConnectionRequest netXAConnectionRequest_ = new NetXAConnectionRequest(this, netConnection_.commBufferSize_);\n            netResultSetRequest_ = (NetResultSetRequest) netXAConnectionRequest_;\n            netStatementRequest_ = (NetStatementRequest) netResultSetRequest_;\n            netPackageRequest_ = (NetPackageRequest) netStatementRequest_;\n            netConnectionRequest_ = (NetConnectionRequest) netPackageRequest_;\n            request_ = (Request) netConnectionRequest_;\n            resultSetRequest_ = (ResultSetRequestInterface) netResultSetRequest_;\n            statementRequest_ = (StatementRequestInterface) netStatementRequest_;\n            connectionRequest_ = (ConnectionRequestInterface) netConnectionRequest_;\n        } else {\n            netResultSetReply_ = new NetResultSetReply(this, netConnection_.commBufferSize_);\n            netStatementReply_ = (NetStatementReply) netResultSetReply_;\n            netPackageReply_ = (NetPackageReply) netStatementReply_;\n            netConnectionReply_ = (NetConnectionReply) netPackageReply_;\n            reply_ = (Reply) netConnectionReply_;\n            resultSetReply_ = new ResultSetReply(this,\n                    netResultSetReply_,\n                    netStatementReply_,\n                    netConnectionReply_);\n            statementReply_ = (StatementReply) resultSetReply_;\n            packageReply_ = (ConnectionReply) statementReply_;\n            connectionReply_ = (ConnectionReply) packageReply_;\n            netResultSetRequest_ = new NetResultSetRequest(this, netConnection_.commBufferSize_);\n            netStatementRequest_ = (NetStatementRequest) netResultSetRequest_;\n            netPackageRequest_ = (NetPackageRequest) netStatementRequest_;\n            netConnectionRequest_ = (NetConnectionRequest) netPackageRequest_;\n            request_ = (Request) netConnectionRequest_;\n            resultSetRequest_ = (ResultSetRequestInterface) netResultSetRequest_;\n            statementRequest_ = (StatementRequestInterface) netStatementRequest_;\n            connectionRequest_ = (ConnectionRequestInterface) netConnectionRequest_;\n        }\n    }\n    protected void resetAgent_(LogWriter netLogWriter,\n                               //CcsidManager sourceCcsidManager,\n                               //CcsidManager targetCcsidManager,\n                               int loginTimeout,\n                               String server,\n                               int port) throws SqlException {\n        exceptionConvertingRdbnam = null;\n        // most properties will remain unchanged on connect reset.\n        targetTypdef_ = originalTargetTypdef_;\n        svrcod_ = 0;\n        // Set TCP/IP Socket Properties\n        try {\n            socket_.setSoTimeout(loginTimeout * 1000);\n        } catch (SocketException e) {\n            try {\n                socket_.close();\n            } catch (IOException doNothing) {\n            }\n            throw new SqlException(logWriter_, \n                new ClientMessageId(SQLState.SOCKET_EXCEPTION),\n                e, e.getMessage());\n        }\n    }\n    void setSvrcod(int svrcod) {\n        if (svrcod > svrcod_) {\n            svrcod_ = svrcod;\n        }\n    }\n    void clearSvrcod() {\n        svrcod_ = CodePoint.SVRCOD_INFO;\n    }\n    private int getSvrcod() {\n        return svrcod_;\n    }\n    public void flush_() throws DisconnectException {\n        sendRequest();\n        reply_.initialize();\n    }\n    // Close socket and its streams.<fim_middle>// class below is blob\n"}