{"text": "<fim_prefix>/*[INCLUDE-IF Sidecar18-SE]*/\n/*******************************************************************************\n * Copyright (c) 2006, 2017 IBM Corp. and others\n *\n * This program and the accompanying materials are made available under\n * the terms of the Eclipse Public License 2.0 which accompanies this\n * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n * or the Apache License, Version 2.0 which accompanies this distribution and\n * is available at https://www.apache.org/licenses/LICENSE-2.0.\n *\n * This Source Code may also be made available under the following\n * Secondary Licenses when the conditions for such availability set\n * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n * General Public License, version 2 with the GNU Classpath\n * Exception [1] and GNU General Public License, version 2 with the\n * OpenJDK Assembly Exception [2].\n *\n * [1] https://www.gnu.org/software/classpath/license.html\n * [2] http://openjdk.java.net/legal/assembly-exception.html\n *\n * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n *******************************************************************************/\npackage com.ibm.dtfj.corereaders.zos.util;\n\n\n/**\n * This class provides an LRU (Least Recently Used) cache which maps integer keys to object values.\n * See the description in the superclass {@link com.ibm.dtfj.corereaders.zos.util.AbstractLruCache} for more\n * details.\n */\n\n<fim_suffix>public final class ObjectLruCache extends AbstractLruCache {\n\n    /** The array of values */\n    Object[] values = new Object[INITIAL_SIZE];\n\n    /**\n     * Create a new ObjectLruCache.\n     * @param maxSize the maximum size the cache can grow to\n     */\n    public ObjectLruCache(int maxSize) {\n        super(maxSize);\n    }\n\n    /**\n     * Overridden method to return values array.\n     */\n    Object getValuesArray() {\n        return values;\n    }\n\n    /**\n     * Overridden method to allocate new values array.\n     */\n    void allocNewValuesArray(int newSize) {\n        super.allocNewValuesArray(newSize);\n        values = new Object[newSize];\n    }\n\n    /**\n     * Overridden method to repopulate with key plus value at given offset.\n     */\n    void put(long key, Object oldvalues, int offset) {\n        Object[] v = (Object[])oldvalues;\n        put(key, v[offset]);\n    }\n\n    /**\n     * Returns the value mapped by the given key. Also promotes this key to the most\n     * recently used.\n     * @return the value or null if it cannot be found\n     */\n    public Object get(long key) {\n        int index = getIndexAndPromote(key) ;\n        if (index != -1) {\n            return values[index];\n        }\n        return null;\n    }\n\n    /**\n     * Add the key/value pair to the map.\n     */\n    public void put(long key, Object value) {\n        int index = putIndexAndPromote(key) ;\n        values[index] = value;\n        checkRehash();\n    }\n}<fim_middle>// class below is data class\n"}