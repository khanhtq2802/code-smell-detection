{"text": "<fim_prefix>/**\n * Copyright (c) 2014,2019 Contributors to the Eclipse Foundation\n *\n * See the NOTICE file(s) distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0\n *\n * SPDX-License-Identifier: EPL-2.0\n */\npackage org.eclipse.smarthome.io.net.http;\nimport static org.eclipse.jetty.http.HttpMethod.*;\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.UnsupportedEncodingException;\nimport java.net.MalformedURLException;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.Properties;\nimport java.util.concurrent.TimeUnit;\nimport org.apache.commons.lang.StringUtils;\nimport org.eclipse.jetty.client.HttpClient;\nimport org.eclipse.jetty.client.HttpProxy;\nimport org.eclipse.jetty.client.ProxyConfiguration;\nimport org.eclipse.jetty.client.ProxyConfiguration.Proxy;\nimport org.eclipse.jetty.client.api.Authentication;\nimport org.eclipse.jetty.client.api.AuthenticationStore;\nimport org.eclipse.jetty.client.api.ContentResponse;\nimport org.eclipse.jetty.client.api.Request;\nimport org.eclipse.jetty.client.util.BasicAuthentication;\nimport org.eclipse.jetty.client.util.InputStreamContentProvider;\nimport org.eclipse.jetty.http.HttpHeader;\nimport org.eclipse.jetty.http.HttpMethod;\nimport org.eclipse.jetty.http.HttpStatus;\nimport org.eclipse.jetty.util.B64Code;\nimport org.eclipse.jetty.util.StringUtil;\nimport org.eclipse.smarthome.core.library.types.RawType;\nimport org.osgi.service.component.annotations.Component;\nimport org.osgi.service.component.annotations.Reference;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n/**\n * Some common methods to be used in HTTP-In-Binding, HTTP-Out-Binding and other bindings\n *\n * For advanced usage direct use of the Jetty client is preferred\n *\n * @author Kai Kreuzer - Initial contribution\n * @author Thomas Eichstaedt-Engelen - Initial contribution\n * @author Svilen Valkanov - replaced Apache HttpClient with Jetty\n */\n@Component(immediate = true)\npublic class HttpUtil {\n    private static final Logger LOGGER = LoggerFactory.getLogger(HttpUtil.class);\n    private static final int DEFAULT_TIMEOUT_MS = 5000;\n    private static HttpClientFactory httpClientFactory;\n    private static class ProxyParams {\n        String proxyHost;\n        int proxyPort = 80;\n        String proxyUser;\n        String proxyPassword;\n        String nonProxyHosts;\n    }\n    /**\n     * Executes the given <code>url</code> with the given <code>httpMethod</code>.\n     * Furthermore the <code>http.proxyXXX</code> System variables are read and\n     * set into the {@link HttpClient}.\n     *\n     * @param httpMethod the HTTP method to use\n     * @param url the url to execute\n     * @param timeout the socket timeout in milliseconds to wait for data\n     * @return the response body or <code>NULL</code> when the request went wrong\n     * @throws IOException when the request execution failed, timed out or it was interrupted\n     */\n    public static String executeUrl(String httpMethod, String url, int timeout) throws IOException {\n        return executeUrl(httpMethod, url, null, null, timeout);\n    }\n    /**\n     * Executes the given <code>url</code> with the given <code>httpMethod</code>.\n     * Furthermore the <code>http.proxyXXX</code> System variables are read and\n     * set into the {@link HttpClient}.\n     *\n     * @param httpMethod the HTTP method to use\n     * @param url the url to execute\n     * @param content the content to be sent to the given <code>url</code> or <code>null</code> if no content should\n     *            be sent.\n     * @param contentType the content type of the given <code>content</code>\n     * @param timeout the socket timeout in milliseconds to wait for data\n     * @return the response body or <code>NULL</code> when the request went wrong\n     * @throws IOException when the request execution failed, timed out or it was interrupted\n     */\n    public static String executeUrl(String httpMethod, String url, InputStream content, String contentType, int timeout)\n            throws IOException {\n        return executeUrl(httpMethod, url, null, content, contentType, timeout);\n    }\n    /**\n     * Executes the given <code>url</code> with the given <code>httpMethod</code>.\n     * Furthermore the <code>http.proxyXXX</code> System variables are read and\n     * set into the {@link HttpClient}.\n     *\n     * @param httpMethod the HTTP method to use\n     * @param url the url to execute\n     * @param httpHeaders optional http request headers which has to be sent within request\n     * @param content the content to be sent to the given <code>url</code> or <code>null</code> if no content should\n     *            be sent.\n     * @param contentType the content type of the given <code>content</code>\n     * @param timeout the socket timeout in milliseconds to wait for data\n     * @return the response body or <code>NULL</code> when the request went wrong\n     * @throws IOException when the request execution failed, timed out or it was interrupted\n     */\n<fim_suffix>    public static String executeUrl(String httpMethod, String url, Properties httpHeaders, InputStream content,\n            String contentType, int timeout) throws IOException {\n        final ProxyParams proxyParams = prepareProxyParams();\n        return executeUrl(httpMethod, url, httpHeaders, content, contentType, timeout, proxyParams.proxyHost,\n                proxyParams.proxyPort, proxyParams.proxyUser, proxyParams.proxyPassword, proxyParams.nonProxyHosts);\n    }\n    /**\n     * Executes the given <code>url</code> with the given <code>httpMethod</code>\n     *\n     * @param httpMethod the HTTP method to use\n     * @param url the url to execute\n     * @param httpHeaders optional HTTP headers which has to be set on request\n     * @param content the content to be sent to the given <code>url</code> or <code>null</code> if no content\n     *            should be sent.\n     * @param contentType the content type of the given <code>content</code>\n     * @param timeout the socket timeout in milliseconds to wait for data\n     * @param proxyHost the hostname of the proxy\n     * @param proxyPort the port of the proxy\n     * @param proxyUser the username to authenticate with the proxy\n     * @param proxyPassword the password to authenticate with the proxy\n     * @param nonProxyHosts the hosts that won't be routed through the proxy\n     * @return the response body or <code>NULL</code> when the request went wrong\n     * @throws IOException when the request execution failed, timed out or it was interrupted\n     */\n    public static String executeUrl(String httpMethod, String url, Properties httpHeaders, InputStream content,\n            String contentType, int timeout, String proxyHost, Integer proxyPort, String proxyUser,\n            String proxyPassword, String nonProxyHosts) throws IOException {\n        ContentResponse response = executeUrlAndGetReponse(httpMethod, url, httpHeaders, content, contentType, timeout,\n                proxyHost, proxyPort, proxyUser, proxyPassword, nonProxyHosts);\n        String encoding = response.getEncoding() != null ? response.getEncoding().replaceAll(\"\\\"\", \"\").trim() : \"UTF-8\";\n        String responseBody;\n        try {\n            responseBody = new String(response.getContent(), encoding);\n        } catch (UnsupportedEncodingException e) {\n            responseBody = null;\n        }\n        return responseBody;\n    }\n    /**\n     * Executes the given <code>url</code> with the given <code>httpMethod</code>\n     *\n     * @param httpMethod the HTTP method to use\n     * @param url the url to execute\n     * @param httpHeaders optional HTTP headers which has to be set on request\n     * @param content the content to be sent to the given <code>url</code> or <code>null</code> if no content\n     *            should be sent.\n     * @param contentType the content type of the given <code>content</code>\n     * @param timeout the socket timeout in milliseconds to wait for data\n     * @param proxyHost the hostname of the proxy\n     * @param proxyPort the port of the proxy\n     * @param proxyUser the username to authenticate with the proxy\n     * @param proxyPassword the password to authenticate with the proxy\n     * @param nonProxyHosts the hosts that won't be routed through the proxy<fim_middle>// function below has no smell\n"}