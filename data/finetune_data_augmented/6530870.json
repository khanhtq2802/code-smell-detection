{"text": "<fim_prefix>/**\n * Copyright (c) 2014,2019 Contributors to the Eclipse Foundation\n *\n * See the NOTICE file(s) distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0\n *\n * SPDX-License-Identifier: EPL-2.0\n */\npackage org.eclipse.smarthome.core.library.items;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.eclipse.jdt.annotation.NonNullByDefault;\nimport org.eclipse.smarthome.core.items.GenericItem;\nimport org.eclipse.smarthome.core.library.CoreItemFactory;\nimport org.eclipse.smarthome.core.library.types.DateTimeType;\nimport org.eclipse.smarthome.core.types.Command;\nimport org.eclipse.smarthome.core.types.RefreshType;\nimport org.eclipse.smarthome.core.types.State;\nimport org.eclipse.smarthome.core.types.UnDefType;\n\n/**\n * A DateTimeItem stores a timestamp including a valid time zone.\n *\n * @author Thomas.Eichstaedt-Engelen\n * @author Kai Kreuzer - Initial contribution and API\n *\n */\n@NonNullByDefault\npublic class DateTimeItem extends GenericItem {\n\n    private static List<Class<? extends State>> acceptedDataTypes = new ArrayList<Class<? extends State>>();\n    private static List<Class<? extends Command>> acceptedCommandTypes = new ArrayList<Class<? extends Command>>();\n\n    static {\n        acceptedDataTypes.add((DateTimeType.class));\n        acceptedDataTypes.add(UnDefType.class);\n\n        acceptedCommandTypes.add(RefreshType.class);\n        acceptedCommandTypes.add(DateTimeType.class);\n    }\n\n    public DateTimeItem(String name) {\n        super(CoreItemFactory.DATETIME, name);\n    }\n\n    @Override\n    public List<Class<? extends State>> getAcceptedDataTypes() {\n        return Collections.unmodifiableList(acceptedDataTypes);\n    }\n\n    @Override\n    public List<Class<? extends Command>> getAcceptedCommandTypes() {\n        return Collections.unmodifiableList(acceptedCommandTypes);\n    }\n\n    public void send(DateTimeType command) {\n        internalSend(command);\n    }\n\n<fim_suffix>    @Override\n    public void setState(State state) {\n        if (isAcceptedState(acceptedDataTypes, state)) {\n            super.setState(state);\n        } else {\n            logSetTypeError(state);\n        }\n    }\n}<fim_middle>// function below has no smell\n"}