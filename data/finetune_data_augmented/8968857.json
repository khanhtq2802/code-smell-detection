{"text": "<fim_prefix>    return (this.tblValidWriteIds == null) ? null : this.tblValidWriteIds.iterator();\n  }\n  public void addToTblValidWriteIds(TableValidWriteIds elem) {\n    if (this.tblValidWriteIds == null) {\n      this.tblValidWriteIds = new ArrayList<TableValidWriteIds>();\n    }\n    this.tblValidWriteIds.add(elem);\n  }\n  public List<TableValidWriteIds> getTblValidWriteIds() {\n    return this.tblValidWriteIds;\n  }\n  public void setTblValidWriteIds(List<TableValidWriteIds> tblValidWriteIds) {\n    this.tblValidWriteIds = tblValidWriteIds;\n  }\n  public void unsetTblValidWriteIds() {\n    this.tblValidWriteIds = null;\n  }\n  /** Returns true if field tblValidWriteIds is set (has been assigned a value) and false otherwise */\n  public boolean isSetTblValidWriteIds() {\n    return this.tblValidWriteIds != null;\n  }\n  public void setTblValidWriteIdsIsSet(boolean value) {\n    if (!value) {\n      this.tblValidWriteIds = null;\n    }\n  }\n  public void setFieldValue(_Fields field, Object value) {\n    switch (field) {\n    case TBL_VALID_WRITE_IDS:\n      if (value == null) {\n        unsetTblValidWriteIds();\n      } else {\n        setTblValidWriteIds((List<TableValidWriteIds>)value);\n      }\n      break;\n    }\n  }\n  public Object getFieldValue(_Fields field) {\n    switch (field) {\n    case TBL_VALID_WRITE_IDS:\n      return getTblValidWriteIds();\n    }\n    throw new IllegalStateException();\n  }\n  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n  public boolean isSet(_Fields field) {\n    if (field == null) {\n      throw new IllegalArgumentException();\n    }\n    switch (field) {\n    case TBL_VALID_WRITE_IDS:\n      return isSetTblValidWriteIds();\n    }\n    throw new IllegalStateException();\n  }\n  @Override\n  public boolean equals(Object that) {\n    if (that == null)\n      return false;\n    if (that instanceof GetValidWriteIdsResponse)\n      return this.equals((GetValidWriteIdsResponse)that);\n    return false;\n  }\n  public boolean equals(GetValidWriteIdsResponse that) {\n    if (that == null)\n      return false;\n    boolean this_present_tblValidWriteIds = true && this.isSetTblValidWriteIds();\n    boolean that_present_tblValidWriteIds = true && that.isSetTblValidWriteIds();\n    if (this_present_tblValidWriteIds || that_present_tblValidWriteIds) {\n      if (!(this_present_tblValidWriteIds && that_present_tblValidWriteIds))\n        return false;\n      if (!this.tblValidWriteIds.equals(that.tblValidWriteIds))\n        return false;\n    }\n    return true;\n  }\n  @Override\n  public int hashCode() {\n    List<Object> list = new ArrayList<Object>();\n    boolean present_tblValidWriteIds = true && (isSetTblValidWriteIds());\n    list.add(present_tblValidWriteIds);\n    if (present_tblValidWriteIds)\n      list.add(tblValidWriteIds);\n    return list.hashCode();\n  }\n  @Override\n  public int compareTo(GetValidWriteIdsResponse other) {\n    if (!getClass().equals(other.getClass())) {\n      return getClass().getName().compareTo(other.getClass().getName());\n    }\n    int lastComparison = 0;\n    lastComparison = Boolean.valueOf(isSetTblValidWriteIds()).compareTo(other.isSetTblValidWriteIds());\n    if (lastComparison != 0) {\n      return lastComparison;\n    }\n    if (isSetTblValidWriteIds()) {\n      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tblValidWriteIds, other.tblValidWriteIds);\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n    }\n    return 0;\n  }\n  public _Fields fieldForId(int fieldId) {\n    return _Fields.findByThriftId(fieldId);\n  }\n  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {\n    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);\n  }\n  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {\n    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);\n  }\n  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder(\"GetValidWriteIdsResponse(\");\n    boolean first = true;\n    sb.append(\"tblValidWriteIds:\");\n    if (this.tblValidWriteIds == null) {\n      sb.append(\"null\");\n    } else {\n      sb.append(this.tblValidWriteIds);\n    }\n    first = false;\n    sb.append(\")\");\n    return sb.toString();\n  }\n  public void validate() throws org.apache.thrift.TException {\n    // check for required fields\n    if (!isSetTblValidWriteIds()) {\n      throw new org.apache.thrift.protocol.TProtocolException(\"Required field 'tblValidWriteIds' is unset! Struct:\" + toString());\n    }\n    // check for sub-struct validity\n  }\n  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n    try {\n      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));\n    } catch (org.apache.thrift.TException te) {\n      throw new java.io.IOException(te);\n    }\n  }\n  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {\n    try {\n      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));\n    } catch (org.apache.thrift.TException te) {\n      throw new java.io.IOException(te);\n    }\n  }\n  private static class GetValidWriteIdsResponseStandardSchemeFactory implements SchemeFactory {\n    public GetValidWriteIdsResponseStandardScheme getScheme() {\n      return new GetValidWriteIdsResponseStandardScheme();\n    }\n  }\n<fim_suffix>  private static class GetValidWriteIdsResponseStandardScheme extends StandardScheme<GetValidWriteIdsResponse> {\n    public void read(org.apache.thrift.protocol.TProtocol iprot, GetValidWriteIdsResponse struct) throws org.apache.thrift.TException {\n      org.apache.thrift.protocol.TField schemeField;\n      iprot.readStructBegin();\n      while (true)\n      {\n        schemeField = iprot.readFieldBegin();\n        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { \n          break;\n        }\n        switch (schemeField.id) {\n          case 1: // TBL_VALID_WRITE_IDS\n            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {\n              {\n                org.apache.thrift.protocol.TList _list658 = iprot.readListBegin();\n                struct.tblValidWriteIds = new ArrayList<TableValidWriteIds>(_list658.size);\n                TableValidWriteIds _elem659;\n                for (int _i660 = 0; _i660 < _list658.size; ++_i660)\n                {\n                  _elem659 = new TableValidWriteIds();\n                  _elem659.read(iprot);\n                  struct.tblValidWriteIds.add(_elem659);\n                }\n                iprot.readListEnd();\n              }\n              struct.setTblValidWriteIdsIsSet(true);\n            } else { \n              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n            }\n            break;\n          default:\n            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n        }\n        iprot.readFieldEnd();\n      }\n      iprot.readStructEnd();\n      struct.validate();\n    }\n    public void write(org.apache.thrift.protocol.TProtocol oprot, GetValidWriteIdsResponse struct) throws org.apache.thrift.TException {\n      struct.validate();\n      oprot.writeStructBegin(STRUCT_DESC);\n      if (struct.tblValidWriteIds != null) {\n        oprot.writeFieldBegin(TBL_VALID_WRITE_IDS_FIELD_DESC);\n        {\n          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tblValidWriteIds.size()));\n          for (TableValidWriteIds _iter661 : struct.tblValidWriteIds)\n          {\n            _iter661.write(oprot);\n          }\n          oprot.writeListEnd();\n        }\n        oprot.writeFieldEnd();\n      }\n      oprot.writeFieldStop();\n      oprot.writeStructEnd();\n    }\n  }<fim_middle>// class below has no smell\n"}