{"text": "<fim_prefix>/* Copyright (c) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.gdata.data.docs;\nimport com.google.gdata.data.BaseEntry;\nimport com.google.gdata.data.Category;\nimport com.google.gdata.data.ExtensionProfile;\nimport com.google.gdata.data.Kind;\nimport com.google.gdata.data.extensions.QuotaBytesUsed;\nimport com.google.gdata.util.Namespaces;\nimport java.util.List;\n/**\n * Describes an Archive entry.\n *\n * \n */\n@Kind.Term(ArchiveEntry.KIND)\npublic class ArchiveEntry extends BaseEntry<ArchiveEntry> {\n  /**\n   * Archive kind term value.\n   */\n  public static final String KIND = DocsNamespace.DOCS_PREFIX + \"archive\";\n  /**\n   * Archive kind category.\n   */\n  public static final Category CATEGORY = new Category(Namespaces.gKind, KIND,\n      \"archive\");\n  /**\n   * Default mutable constructor.\n   */\n  public ArchiveEntry() {\n    super();\n    getCategories().add(CATEGORY);\n  }\n  /**\n   * Constructs a new instance by doing a shallow copy of data from an existing\n   * {@link BaseEntry} instance.\n   *\n   * @param sourceEntry source entry\n   */\n  public ArchiveEntry(BaseEntry<?> sourceEntry) {\n    super(sourceEntry);\n  }\n  @Override\n  public void declareExtensions(ExtensionProfile extProfile) {\n    if (extProfile.isDeclared(ArchiveEntry.class)) {\n      return;\n    }\n    super.declareExtensions(extProfile);\n    extProfile.declare(ArchiveEntry.class, ArchiveComplete.class);\n    extProfile.declare(ArchiveEntry.class,\n        ArchiveConversion.getDefaultDescription(true, true));\n    extProfile.declare(ArchiveEntry.class,\n        ArchiveFailure.getDefaultDescription(false, true));\n    extProfile.declare(ArchiveEntry.class, ArchiveNotify.class);\n    extProfile.declare(ArchiveEntry.class, ArchiveNotifyStatus.class);\n    extProfile.declare(ArchiveEntry.class,\n        ArchiveResourceId.getDefaultDescription(false, true));\n    extProfile.declare(ArchiveEntry.class, ArchiveStatus.class);\n    extProfile.declare(ArchiveEntry.class, ArchiveTotal.class);\n    extProfile.declare(ArchiveEntry.class, ArchiveTotalComplete.class);\n    extProfile.declare(ArchiveEntry.class, ArchiveTotalFailure.class);\n    extProfile.declare(ArchiveEntry.class, QuotaBytesUsed.class);\n  }\n  /**\n   * Returns the archive complete.\n   *\n   * @return archive complete\n   */\n  public ArchiveComplete getArchiveComplete() {\n    return getExtension(ArchiveComplete.class);\n  }\n  /**\n   * Sets the archive complete.\n   *\n   * @param archiveComplete archive complete or <code>null</code> to reset\n   */\n  public void setArchiveComplete(ArchiveComplete archiveComplete) {\n    if (archiveComplete == null) {\n      removeExtension(ArchiveComplete.class);\n    } else {\n      setExtension(archiveComplete);\n    }\n  }\n  /**\n   * Returns whether it has the archive complete.\n   *\n   * @return whether it has the archive complete\n   */\n  public boolean hasArchiveComplete() {\n    return hasExtension(ArchiveComplete.class);\n  }\n  /**\n   * Returns the archive conversions.\n   *\n   * @return archive conversions\n   */\n  public List<ArchiveConversion> getArchiveConversions() {\n    return getRepeatingExtension(ArchiveConversion.class);\n  }\n  /**\n   * Adds a new archive conversion.\n   *\n   * @param archiveConversion archive conversion\n   */\n  public void addArchiveConversion(ArchiveConversion archiveConversion) {\n    getArchiveConversions().add(archiveConversion);\n  }\n  /**\n   * Returns whether it has the archive conversions.\n   *\n   * @return whether it has the archive conversions\n   */\n  public boolean hasArchiveConversions() {\n    return hasRepeatingExtension(ArchiveConversion.class);\n  }\n  /**\n   * Returns the archive failures.\n   *\n   * @return archive failures\n   */\n  public List<ArchiveFailure> getArchiveFailures() {\n    return getRepeatingExtension(ArchiveFailure.class);\n  }\n  /**\n   * Adds a new archive failure.\n   *\n   * @param archiveFailure archive failure\n   */\n  public void addArchiveFailure(ArchiveFailure archiveFailure) {\n    getArchiveFailures().add(archiveFailure);\n  }\n  /**\n   * Returns whether it has the archive failures.\n   *\n   * @return whether it has the archive failures\n   */\n  public boolean hasArchiveFailures() {\n    return hasRepeatingExtension(ArchiveFailure.class);\n  }\n  /**\n   * Returns the archive notify.\n   *\n   * @return archive notify\n   */\n  public ArchiveNotify getArchiveNotify() {\n    return getExtension(ArchiveNotify.class);\n  }\n  /**\n   * Sets the archive notify.\n   *\n   * @param archiveNotify archive notify or <code>null</code> to reset\n   */\n  public void setArchiveNotify(ArchiveNotify archiveNotify) {\n    if (archiveNotify == null) {\n      removeExtension(ArchiveNotify.class);\n    } else {\n      setExtension(archiveNotify);\n    }\n  }\n  /**\n   * Returns whether it has the archive notify.\n   *\n   * @return whether it has the archive notify\n   */\n<fim_suffix>  public boolean hasArchiveNotify() {\n    return hasExtension(ArchiveNotify.class);\n  }\n  /**\n   * Returns the archive notify status.\n   *\n   * @return archive notify status\n   */\n  public ArchiveNotifyStatus getArchiveNotifyStatus() {\n    return getExtension(ArchiveNotifyStatus.class);\n  }\n  /**\n   * Sets the archive notify status.\n   *\n   * @param archiveNotifyStatus archive notify status or <code>null</code> to\n   *     reset\n   */\n  public void setArchiveNotifyStatus(ArchiveNotifyStatus archiveNotifyStatus) {\n    if (archiveNotifyStatus == null) {\n      removeExtension(ArchiveNotifyStatus.class);\n    } else {\n      setExtension(archiveNotifyStatus);\n    }\n  }\n  /**\n   * Returns whether it has the archive notify status.\n   *\n   * @return whether it has the archive notify status\n   */\n  public boolean hasArchiveNotifyStatus() {\n    return hasExtension(ArchiveNotifyStatus.class);\n  }\n  /**\n   * Returns the archive resource ids.\n   *\n   * @return archive resource ids\n   */\n  public List<ArchiveResourceId> getArchiveResourceIds() {\n    return getRepeatingExtension(ArchiveResourceId.class);\n  }\n  /**\n   * Adds a new archive resource id.\n   *\n   * @param archiveResourceId archive resource id\n   */\n  public void addArchiveResourceId(ArchiveResourceId archiveResourceId) {\n    getArchiveResourceIds().add(archiveResourceId);\n  }\n  /**\n   * Returns whether it has the archive resource ids.\n   *\n   * @return whether it has the archive resource ids\n   */\n  public boolean hasArchiveResourceIds() {\n    return hasRepeatingExtension(ArchiveResourceId.class);\n  }\n  /**\n   * Returns the archive status.\n   *\n   * @return archive status\n   */\n  public ArchiveStatus getArchiveStatus() {\n    return getExtension(ArchiveStatus.class);\n  }\n  /**\n   * Sets the archive status.\n   *\n   * @param archiveStatus archive status or <code>null</code> to reset\n   */\n  public void setArchiveStatus(ArchiveStatus archiveStatus) {\n    if (archiveStatus == null) {\n      removeExtension(ArchiveStatus.class);\n    } else {\n      setExtension(archiveStatus);\n    }\n  }\n  /**\n   * Returns whether it has the archive status.\n   *\n   * @return whether it has the archive status\n   */\n  public boolean hasArchiveStatus() {\n    return hasExtension(ArchiveStatus.class);\n  }\n  /**\n   * Returns the archive total.\n   *\n   * @return archive total\n   */\n  public ArchiveTotal getArchiveTotal() {\n    return getExtension(ArchiveTotal.class);\n  }\n  /**\n   * Sets the archive total.\n   *\n   * @param archiveTotal archive total or <code>null</code> to reset\n   */\n  public void setArchiveTotal(ArchiveTotal archiveTotal) {\n    if (archiveTotal == null) {\n      removeExtension(ArchiveTotal.class);\n    } else {\n      setExtension(archiveTotal);\n    }\n  }\n  /**\n   * Returns whether it has the archive total.\n   *\n   * @return whether it has the archive total\n   */\n  public boolean hasArchiveTotal() {\n    return hasExtension(ArchiveTotal.class);\n  }\n  /**\n   * Returns the archive total complete.\n   *\n   * @return archive total complete\n   */\n  public ArchiveTotalComplete getArchiveTotalComplete() {\n    return getExtension(ArchiveTotalComplete.class);\n  }\n  /**\n   * Sets the archive total complete.\n   *\n   * @param archiveTotalComplete archive total complete or <code>null</code> to<fim_middle>// function below has no smell\n"}