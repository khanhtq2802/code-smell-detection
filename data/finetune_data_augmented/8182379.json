{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.activemq.openwire.v1;\n\nimport java.io.DataInput;\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.activemq.command.DataStructure;\nimport org.apache.activemq.command.MessageDispatchNotification;\nimport org.apache.activemq.openwire.BooleanStream;\nimport org.apache.activemq.openwire.OpenWireFormat;\n\n/**\n * Marshalling code for Open Wire Format for\n * MessageDispatchNotificationMarshaller NOTE!: This file is auto generated - do\n * not modify! if you need to make a change, please see the modify the groovy\n * scripts in the under src/gram/script and then use maven openwire:generate to\n * regenerate this file.\n * \n * \n */\npublic class MessageDispatchNotificationMarshaller extends BaseCommandMarshaller {\n\n    /**\n     * Return the type of Data Structure we marshal\n     * \n     * @return short representation of the type data structure\n     */\n    public byte getDataStructureType() {\n        return MessageDispatchNotification.DATA_STRUCTURE_TYPE;\n    }\n\n    /**\n     * @return a new object instance\n     */\n    public DataStructure createObject() {\n        return new MessageDispatchNotification();\n    }\n\n    /**\n     * Un-marshal an object instance from the data input stream\n     * \n     * @param o the object to un-marshal\n     * @param dataIn the data input stream to build the object from\n     * @throws IOException\n     */\n    public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException {\n        super.tightUnmarshal(wireFormat, o, dataIn, bs);\n\n        MessageDispatchNotification info = (MessageDispatchNotification)o;\n        info.setConsumerId((org.apache.activemq.command.ConsumerId)tightUnmarsalCachedObject(wireFormat, dataIn, bs));\n        info.setDestination((org.apache.activemq.command.ActiveMQDestination)tightUnmarsalCachedObject(wireFormat, dataIn, bs));\n        info.setDeliverySequenceId(tightUnmarshalLong(wireFormat, dataIn, bs));\n        info.setMessageId((org.apache.activemq.command.MessageId)tightUnmarsalNestedObject(wireFormat, dataIn, bs));\n\n    }\n\n    /**\n     * Write the booleans that this object uses to a BooleanStream\n     */\n<fim_suffix>    public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException {\n\n        MessageDispatchNotification info = (MessageDispatchNotification)o;\n\n        int rc = super.tightMarshal1(wireFormat, o, bs);\n        rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getConsumerId(), bs);\n        rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getDestination(), bs);\n        rc += tightMarshalLong1(wireFormat, info.getDeliverySequenceId(), bs);\n        rc += tightMarshalNestedObject1(wireFormat, (DataStructure)info.getMessageId(), bs);\n\n        return rc + 0;\n    }\n\n    /**\n     * Write a object instance to data output stream\n     * \n     * @param o the instance to be marshaled\n     * @param dataOut the output stream\n     * @throws IOException thrown if an error occurs\n     */\n    public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException {\n        super.tightMarshal2(wireFormat, o, dataOut, bs);\n\n        MessageDispatchNotification info = (MessageDispatchNotification)o;\n        tightMarshalCachedObject2(wireFormat, (DataStructure)info.getConsumerId(), dataOut, bs);\n        tightMarshalCachedObject2(wireFormat, (DataStructure)info.getDestination(), dataOut, bs);\n        tightMarshalLong2(wireFormat, info.getDeliverySequenceId(), dataOut, bs);\n        tightMarshalNestedObject2(wireFormat, (DataStructure)info.getMessageId(), dataOut, bs);\n\n    }\n\n    /**\n     * Un-marshal an object instance from the data input stream\n     * \n     * @param o the object to un-marshal\n     * @param dataIn the data input stream to build the object from\n     * @throws IOException\n     */\n    public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException {\n        super.looseUnmarshal(wireFormat, o, dataIn);\n\n        MessageDispatchNotification info = (MessageDispatchNotification)o;\n        info.setConsumerId((org.apache.activemq.command.ConsumerId)looseUnmarsalCachedObject(wireFormat, dataIn));\n        info.setDestination((org.apache.activemq.command.ActiveMQDestination)looseUnmarsalCachedObject(wireFormat, dataIn));\n        info.setDeliverySequenceId(looseUnmarshalLong(wireFormat, dataIn));\n        info.setMessageId((org.apache.activemq.command.MessageId)looseUnmarsalNestedObject(wireFormat, dataIn));\n\n    }\n\n    /**\n     * Write the booleans that this object uses to a BooleanStream\n     */\n    public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException {\n\n        MessageDispatchNotification info = (MessageDispatchNotification)o;\n\n        super.looseMarshal(wireFormat, o, dataOut);\n        looseMarshalCachedObject(wireFormat, (DataStructure)info.getConsumerId(), dataOut);\n        looseMarshalCachedObject(wireFormat, (DataStructure)info.getDestination(), dataOut);\n        looseMarshalLong(wireFormat, info.getDeliverySequenceId(), dataOut);\n        looseMarshalNestedObject(wireFormat, (DataStructure)info.getMessageId(), dataOut);\n\n    }\n}<fim_middle>// function below has no smell\n"}