{"text": "<fim_prefix>/*\n * Copyright (c) 2012-2018 Red Hat, Inc.\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *   Red Hat, Inc. - initial API and implementation\n */\npackage org.eclipse.che.ide.ui.smartTree.presentation;\n\nimport com.google.gwt.dom.client.Element;\nimport org.vectomatic.dom.svg.ui.SVGResource;\n\n/**\n * Node presentation which contains a useful builder to friendly build the presentation. Node which\n * should provide a new type of presentation should implement a {@link HasNewPresentation}\n * interface.\n *\n * @author Vlad Zhukovskyi\n * @since 5.19.0\n */\n<fim_suffix>public class NewNodePresentation {\n\n  private String nodeText;\n  private StyleConfigurator nodeTextStyle;\n  private String nodeInfoText;\n  private StyleConfigurator nodeInfoTextStyle;\n  private SVGResource icon;\n  private Element userElement;\n\n  private NewNodePresentation(Builder builder) {\n    this.nodeText = builder.nodeText;\n    this.nodeTextStyle = builder.nodeTextStyle;\n    this.nodeInfoText = builder.nodeInfoText;\n    this.nodeInfoTextStyle = builder.nodeInfoTextStyle;\n    this.icon = builder.icon;\n    this.userElement = builder.userElement;\n  }\n\n  public String getNodeText() {\n    return nodeText;\n  }\n\n  public StyleConfigurator getNodeTextStyle() {\n    return nodeTextStyle;\n  }\n\n  public String getNodeInfoText() {\n    return nodeInfoText;\n  }\n\n  public StyleConfigurator getNodeInfoTextStyle() {\n    return nodeInfoTextStyle;\n  }\n\n  public SVGResource getIcon() {\n    return icon;\n  }\n\n  public Element getUserElement() {\n    return userElement;\n  }\n\n  public static class Builder {\n    private String nodeText;\n    private StyleConfigurator nodeTextStyle;\n    private String nodeInfoText;\n    private StyleConfigurator nodeInfoTextStyle;\n    private SVGResource icon;\n    private Element userElement;\n\n    public Builder() {}\n\n    public Builder withNodeText(String nodeText) {\n      this.nodeText = nodeText;\n      return this;\n    }\n\n    public Builder withNodeTextStyle(StyleConfigurator nodeTextStyle) {\n      this.nodeTextStyle = nodeTextStyle;\n      return this;\n    }\n\n    public Builder withNodeInfoText(String nodeInfoText) {\n      this.nodeInfoText = nodeInfoText;\n      return this;\n    }\n\n    public Builder withNodeIntoTextStyle(StyleConfigurator nodeInfoTextStyle) {\n      this.nodeInfoTextStyle = nodeInfoTextStyle;\n      return this;\n    }\n\n    public Builder withIcon(SVGResource icon) {\n      this.icon = icon;\n      return this;\n    }\n\n    public Builder withUserElement(Element userElement) {\n      this.userElement = userElement;\n      return this;\n    }\n\n    public NewNodePresentation build() {\n      return new NewNodePresentation(this);\n    }\n  }\n}<fim_middle>// class below is data class\n"}