{"text": "<fim_prefix>/*\n * Copyright 2015-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.statemachine.region;\n\nimport java.util.Collection;\nimport java.util.UUID;\n\nimport org.springframework.messaging.Message;\nimport org.springframework.statemachine.listener.StateMachineListener;\nimport org.springframework.statemachine.state.State;\nimport org.springframework.statemachine.transition.Transition;\n\n/**\n * A region is an orthogonal part of either a composite state or a state\n * machine. It contains states and transitions.\n *\n * @author Janne Valkealahti\n *\n * @param <S> the type of state\n * @param <E> the type of event\n */\n<fim_suffix>public interface Region<S, E> {\n\n\t/**\n\t * Gets the region and state machine unique id.\n\t *\n\t * @return the region and state machine unique id\n\t */\n\tUUID getUuid();\n\n\t/**\n\t * Gets the region and state machine id. This identifier\n\t * is provided for users disposal and can be set from\n\t * a various ways to build a machines.\n\t *\n\t * @return the region and state machine id\n\t */\n\tString getId();\n\n\t/**\n\t * Start the region.\n\t */\n\tvoid start();\n\n\t/**\n\t * Stop the region.\n\t */\n\tvoid stop();\n\n\t/**\n\t * Send an event {@code E} wrapped with a {@link Message} to the region.\n\t *\n\t * @param event the wrapped event to send\n\t * @return true if event was accepted\n\t */\n\tboolean sendEvent(Message<E> event);\n\n\t/**\n\t * Send an event {@code E} to the region.\n\t *\n\t * @param event the event to send\n\t * @return true if event was accepted\n\t */\n\tboolean sendEvent(E event);\n\n\t/**\n\t * Gets the current {@link State}.\n\t *\n\t * @return current state\n\t */\n\tState<S,E> getState();\n\n\t/**\n\t * Gets the {@link State}s defined in this region. Returned collection is\n\t * an unmodifiable copy because states in a state machine are immutable.\n\t *\n\t * @return immutable copy of states\n\t */\n\tCollection<State<S, E>> getStates();\n\n\t/**\n\t * Gets a {@link Transition}s for this region.\n\t *\n\t * @return immutable copy of transitions\n\t */\n\tCollection<Transition<S,E>> getTransitions();\n\n\t/**\n\t * Checks if region complete. Region is considered to be completed if it has\n\t * reached its end state and no further event processing is happening.\n\t *\n\t * @return true, if complete\n\t */\n\tboolean isComplete();\n\n\t/**\n\t * Adds the state listener.\n\t *\n\t * @param listener the listener\n\t */\n\tvoid addStateListener(StateMachineListener<S, E> listener);\n\n\t/**\n\t * Removes the state listener.\n\t *\n\t * @param listener the listener\n\t */\n\tvoid removeStateListener(StateMachineListener<S, E> listener);\n\n}<fim_middle>// class below has no smell\n"}