{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.atlas.utils;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Handles logging of performance measurements.\n */\n<fim_suffix>public final class AtlasPerfTracer {\n    protected final Logger logger;\n    protected final String tag;\n    private   final long   startTimeMs;\n\n    private static long reportingThresholdMs = 0L;\n\n    public static Logger getPerfLogger(String name) {\n        return LoggerFactory.getLogger(\"org.apache.atlas.perf.\" + name);\n    }\n\n    public static Logger getPerfLogger(Class<?> cls) {\n        return AtlasPerfTracer.getPerfLogger(cls.getName());\n    }\n\n    public static boolean isPerfTraceEnabled(Logger logger) {\n        return logger.isDebugEnabled();\n    }\n\n    public static AtlasPerfTracer getPerfTracer(Logger logger, String tag) {\n        return new AtlasPerfTracer(logger, tag);\n    }\n\n    public static void log(AtlasPerfTracer tracer) {\n        if (tracer != null) {\n            tracer.log();\n        }\n    }\n\n    private AtlasPerfTracer(Logger logger, String tag) {\n        this.logger = logger;\n        this.tag    = tag;\n        startTimeMs = System.currentTimeMillis();\n    }\n\n    public String getTag() {\n        return tag;\n    }\n\n    public long getStartTime() {\n        return startTimeMs;\n    }\n\n    public long getElapsedTime() {\n        return System.currentTimeMillis() - startTimeMs;\n    }\n\n    public void log() {\n        long elapsedTime = getElapsedTime();\n        if (elapsedTime > reportingThresholdMs) {\n            logger.debug(\"PERF|{}|{}\", tag, elapsedTime);\n        }\n    }\n}<fim_middle>// class below is data class\n"}