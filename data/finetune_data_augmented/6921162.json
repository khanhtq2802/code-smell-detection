{"text": "<fim_prefix>/* Copyright (c) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\npackage com.google.gdata.data.spreadsheet;\n\nimport com.google.gdata.data.AbstractExtension;\nimport com.google.gdata.data.AttributeGenerator;\nimport com.google.gdata.data.AttributeHelper;\nimport com.google.gdata.data.ExtensionDescription;\nimport com.google.gdata.util.ParseException;\n\n/**\n * Describes a field.\n *\n * \n */\n@ExtensionDescription.Default(\n    nsAlias = Namespaces.gSpreadAlias,\n    nsUri = Namespaces.gSpread,\n    localName = Field.XML_NAME)\npublic class Field extends AbstractExtension {\n\n  /** XML element name */\n  static final String XML_NAME = \"field\";\n\n  /** XML \"index\" attribute name */\n  private static final String INDEX = \"index\";\n\n  /** XML \"name\" attribute name */\n  private static final String NAME = \"name\";\n\n  /** Letter(s) or integer position of the column */\n  private String index = null;\n\n  /** User defined name of the column */\n  private String name = null;\n\n  /** Displayed value of the cell */\n  private String value = null;\n\n  /**\n   * Default mutable constructor.\n   */\n  public Field() {\n    super();\n  }\n\n  /**\n   * Immutable constructor.\n   *\n   * @param index letter(s) or integer position of the column.\n   * @param name user defined name of the column.\n   * @param value displayed value of the cell.\n   */\n  public Field(String index, String name, String value) {\n    super();\n    setIndex(index);\n    setName(name);\n    setValue(value);\n    setImmutable(true);\n  }\n\n  /**\n   * Returns the letter(s) or integer position of the column.\n   *\n   * @return letter(s) or integer position of the column\n   */\n  public String getIndex() {\n    return index;\n  }\n\n  /**\n   * Sets the letter(s) or integer position of the column.\n   *\n   * @param index letter(s) or integer position of the column or\n   *     <code>null</code> to reset\n   */\n  public void setIndex(String index) {\n    throwExceptionIfImmutable();\n    this.index = index;\n  }\n\n  /**\n   * Returns whether it has the letter(s) or integer position of the column.\n   *\n   * @return whether it has the letter(s) or integer position of the column\n   */\n<fim_suffix>  public boolean hasIndex() {\n    return getIndex() != null;\n  }\n\n  /**\n   * Returns the user defined name of the column.\n   *\n   * @return user defined name of the column\n   */\n  public String getName() {\n    return name;\n  }\n\n  /**\n   * Sets the user defined name of the column.\n   *\n   * @param name user defined name of the column or <code>null</code> to reset\n   */\n  public void setName(String name) {\n    throwExceptionIfImmutable();\n    this.name = name;\n  }\n\n  /**\n   * Returns whether it has the user defined name of the column.\n   *\n   * @return whether it has the user defined name of the column\n   */\n  public boolean hasName() {\n    return getName() != null;\n  }\n\n  /**\n   * Returns the displayed value of the cell.\n   *\n   * @return displayed value of the cell\n   */\n  public String getValue() {\n    return value;\n  }\n\n  /**\n   * Sets the displayed value of the cell.\n   *\n   * @param value displayed value of the cell or <code>null</code> to reset\n   */\n  public void setValue(String value) {\n    throwExceptionIfImmutable();\n    this.value = value;\n  }\n\n  /**\n   * Returns whether it has the displayed value of the cell.\n   *\n   * @return whether it has the displayed value of the cell\n   */\n  public boolean hasValue() {\n    return getValue() != null;\n  }\n\n  @Override\n  protected void validate() {\n    if (name == null) {\n      throwExceptionForMissingAttribute(NAME);\n    }\n  }\n\n  /**\n   * Returns the extension description, specifying whether it is required, and\n   * whether it is repeatable.\n   *\n   * @param required   whether it is required\n   * @param repeatable whether it is repeatable\n   * @return extension description\n   */\n  public static ExtensionDescription getDefaultDescription(boolean required,\n      boolean repeatable) {\n    ExtensionDescription desc =\n        ExtensionDescription.getDefaultDescription(Field.class);\n    desc.setRequired(required);\n    desc.setRepeatable(repeatable);\n    return desc;\n  }\n\n  @Override\n  protected void putAttributes(AttributeGenerator generator) {\n    generator.put(INDEX, index);\n    generator.put(NAME, name);\n    generator.setContent(value);\n  }\n\n  @Override\n  protected void consumeAttributes(AttributeHelper helper) throws ParseException\n      {\n    index = helper.consume(INDEX, false);\n    name = helper.consume(NAME, true);\n    value = helper.consume(null, false);\n  }\n\n  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) {\n      return true;\n    }\n    if (!sameClassAs(obj)) {\n      return false;\n    }\n    Field other = (Field) obj;\n    return eq(index, other.index)\n        && eq(name, other.name)\n        && eq(value, other.value);\n  }\n\n  @Override\n  public int hashCode() {\n    int result = getClass().hashCode();\n    if (index != null) {\n      result = 37 * result + index.hashCode();\n    }\n    if (name != null) {\n      result = 37 * result + name.hashCode();\n    }\n    if (value != null) {\n      result = 37 * result + value.hashCode();\n    }\n    return result;\n  }\n\n  @Override\n  public String toString() {\n    return \"{Field index=\" + index + \" name=\" + name + \" value=\" + value + \"}\";\n  }\n\n}<fim_middle>// function below has no smell\n"}