{"text": "<fim_prefix>\n<fim_suffix>\t@Singleton\n\tpublic static final class NameMappings {\n\t\tprivate final Map<AbstractElement, String> mappings;\n\t\t@Inject\n\t\tpublic NameMappings(DomainmodelGrammarAccess grammarAccess) {\n\t\t\tImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();\n\t\t\tinit(builder, grammarAccess);\n\t\t\tthis.mappings = builder.build();\n\t\t}\n\t\tpublic String getRuleName(AbstractElement element) {\n\t\t\treturn mappings.get(element);\n\t\t}\n\t\tprivate static void init(ImmutableMap.Builder<AbstractElement, String> builder, DomainmodelGrammarAccess grammarAccess) {\n\t\t\tbuilder.put(grammarAccess.getAbstractElementAccess().getAlternatives(), \"rule__AbstractElement__Alternatives\");\n\t\t\tbuilder.put(grammarAccess.getFeatureAccess().getAlternatives(), \"rule__Feature__Alternatives\");\n\t\t\tbuilder.put(grammarAccess.getXAssignmentAccess().getAlternatives(), \"rule__XAssignment__Alternatives\");\n\t\t\tbuilder.put(grammarAccess.getOpMultiAssignAccess().getAlternatives(), \"rule__OpMultiAssign__Alternatives\");\n\t\t\tbuilder.put(grammarAccess.getOpEqualityAccess().getAlternatives(), \"rule__OpEquality__Alternatives\");\n\t\t\tbuilder.put(grammarAccess.getXRelationalExpressionAccess().getAlternatives_1(), \"rule__XRelationalExpression__Alternatives_1\");\n\t\t\tbuilder.put(grammarAccess.getOpCompareAccess().getAlternatives(), \"rule__OpCompare__Alternatives\");\n\t\t\tbuilder.put(grammarAccess.getOpOtherAccess().getAlternatives(), \"rule__OpOther__Alternatives\");\n\t\t\tbuilder.put(grammarAccess.getOpOtherAccess().getAlternatives_5_1(), \"rule__OpOther__Alternatives_5_1\");\n\t\t\tbuilder.put(grammarAccess.getOpOtherAccess().getAlternatives_6_1(), \"rule__OpOther__Alternatives_6_1\");\n\t\t\tbuilder.put(grammarAccess.getOpAddAccess().getAlternatives(), \"rule__OpAdd__Alternatives\");\n\t\t\tbuilder.put(grammarAccess.getOpMultiAccess().getAlternatives(), \"rule__OpMulti__Alternatives\");\n\t\t\tbuilder.put(grammarAccess.getXUnaryOperationAccess().getAlternatives(), \"rule__XUnaryOperation__Alternatives\");\n\t\t\tbuilder.put(grammarAccess.getOpUnaryAccess().getAlternatives(), \"rule__OpUnary__Alternatives\");\n\t\t\tbuilder.put(grammarAccess.getOpPostfixAccess().getAlternatives(), \"rule__OpPostfix__Alternatives\");\n\t\t\tbuilder.put(grammarAccess.getXMemberFeatureCallAccess().getAlternatives_1(), \"rule__XMemberFeatureCall__Alternatives_1\");\n\t\t\tbuilder.put(grammarAccess.getXMemberFeatureCallAccess().getAlternatives_1_0_0_0_1(), \"rule__XMemberFeatureCall__Alternatives_1_0_0_0_1\");\n\t\t\tbuilder.put(grammarAccess.getXMemberFeatureCallAccess().getAlternatives_1_1_0_0_1(), \"rule__XMemberFeatureCall__Alternatives_1_1_0_0_1\");\n\t\t\tbuilder.put(grammarAccess.getXMemberFeatureCallAccess().getAlternatives_1_1_3_1(), \"rule__XMemberFeatureCall__Alternatives_1_1_3_1\");\n\t\t\tbuilder.put(grammarAccess.getXPrimaryExpressionAccess().getAlternatives(), \"rule__XPrimaryExpression__Alternatives\");\n\t\t\tbuilder.put(grammarAccess.getXLiteralAccess().getAlternatives(), \"rule__XLiteral__Alternatives\");\n\t\t\tbuilder.put(grammarAccess.getXCollectionLiteralAccess().getAlternatives(), \"rule__XCollectionLiteral__Alternatives\");\n\t\t\tbuilder.put(grammarAccess.getXSwitchExpressionAccess().getAlternatives_2(), \"rule__XSwitchExpression__Alternatives_2\");\n\t\t\tbuilder.put(grammarAccess.getXCasePartAccess().getAlternatives_3(), \"rule__XCasePart__Alternatives_3\");\n\t\t\tbuilder.put(grammarAccess.getXExpressionOrVarDeclarationAccess().getAlternatives(), \"rule__XExpressionOrVarDeclaration__Alternatives\");\n\t\t\tbuilder.put(grammarAccess.getXVariableDeclarationAccess().getAlternatives_1(), \"rule__XVariableDeclaration__Alternatives_1\");\n\t\t\tbuilder.put(grammarAccess.getXVariableDeclarationAccess().getAlternatives_2(), \"rule__XVariableDeclaration__Alternatives_2\");\n\t\t\tbuilder.put(grammarAccess.getXFeatureCallAccess().getAlternatives_3_1(), \"rule__XFeatureCall__Alternatives_3_1\");\n\t\t\tbuilder.put(grammarAccess.getFeatureCallIDAccess().getAlternatives(), \"rule__FeatureCallID__Alternatives\");\n\t\t\tbuilder.put(grammarAccess.getIdOrSuperAccess().getAlternatives(), \"rule__IdOrSuper__Alternatives\");\n\t\t\tbuilder.put(grammarAccess.getXConstructorCallAccess().getAlternatives_4_1(), \"rule__XConstructorCall__Alternatives_4_1\");\n\t\t\tbuilder.put(grammarAccess.getXBooleanLiteralAccess().getAlternatives_1(), \"rule__XBooleanLiteral__Alternatives_1\");\n\t\t\tbuilder.put(grammarAccess.getXTryCatchFinallyExpressionAccess().getAlternatives_3(), \"rule__XTryCatchFinallyExpression__Alternatives_3\");\n\t\t\tbuilder.put(grammarAccess.getNumberAccess().getAlternatives(), \"rule__Number__Alternatives\");\n\t\t\tbuilder.put(grammarAccess.getNumberAccess().getAlternatives_1_0(), \"rule__Number__Alternatives_1_0\");\n\t\t\tbuilder.put(grammarAccess.getNumberAccess().getAlternatives_1_1_1(), \"rule__Number__Alternatives_1_1_1\");\n\t\t\tbuilder.put(grammarAccess.getJvmTypeReferenceAccess().getAlternatives(), \"rule__JvmTypeReference__Alternatives\");\n\t\t\tbuilder.put(grammarAccess.getJvmArgumentTypeReferenceAccess().getAlternatives(), \"rule__JvmArgumentTypeReference__Alternatives\");\n\t\t\tbuilder.put(grammarAccess.getJvmWildcardTypeReferenceAccess().getAlternatives_2(), \"rule__JvmWildcardTypeReference__Alternatives_2\");\n\t\t\tbuilder.put(grammarAccess.getXImportDeclarationAccess().getAlternatives_1(), \"rule__XImportDeclaration__Alternatives_1\");\n\t\t\tbuilder.put(grammarAccess.getXImportDeclarationAccess().getAlternatives_1_0_3(), \"rule__XImportDeclaration__Alternatives_1_0_3\");\n\t\t\tbuilder.put(grammarAccess.getDomainModelAccess().getGroup(), \"rule__DomainModel__Group__0\");\n\t\t\tbuilder.put(grammarAccess.getPackageDeclarationAccess().getGroup(), \"rule__PackageDeclaration__Group__0\");\n\t\t\tbuilder.put(grammarAccess.getEntityAccess().getGroup(), \"rule__Entity__Group__0\");\n\t\t\tbuilder.put(grammarAccess.getEntityAccess().getGroup_2(), \"rule__Entity__Group_2__0\");\n\t\t\tbuilder.put(grammarAccess.getPropertyAccess().getGroup(), \"rule__Property__Group__0\");\n\t\t\tbuilder.put(grammarAccess.getOperationAccess().getGroup(), \"rule__Operation__Group__0\");\n\t\t\tbuilder.put(grammarAccess.getOperationAccess().getGroup_3(), \"rule__Operation__Group_3__0\");\n\t\t\tbuilder.put(grammarAccess.getOperationAccess().getGroup_3_1(), \"rule__Operation__Group_3_1__0\");\n\t\t\tbuilder.put(grammarAccess.getOperationAccess().getGroup_5(), \"rule__Operation__Group_5__0\");\n\t\t\tbuilder.put(grammarAccess.getXAssignmentAccess().getGroup_0(), \"rule__XAssignment__Group_0__0\");\n\t\t\tbuilder.put(grammarAccess.getXAssignmentAccess().getGroup_1(), \"rule__XAssignment__Group_1__0\");\n\t\t\tbuilder.put(grammarAccess.getXAssignmentAccess().getGroup_1_1(), \"rule__XAssignment__Group_1_1__0\");\n\t\t\tbuilder.put(grammarAccess.getXAssignmentAccess().getGroup_1_1_0(), \"rule__XAssignment__Group_1_1_0__0\");\n\t\t\tbuilder.put(grammarAccess.getXAssignmentAccess().getGroup_1_1_0_0(), \"rule__XAssignment__Group_1_1_0_0__0\");\n\t\t\tbuilder.put(grammarAccess.getOpMultiAssignAccess().getGroup_5(), \"rule__OpMultiAssign__Group_5__0\");\n\t\t\tbuilder.put(grammarAccess.getOpMultiAssignAccess().getGroup_6(), \"rule__OpMultiAssign__Group_6__0\");\n\t\t\tbuilder.put(grammarAccess.getXOrExpressionAccess().getGroup(), \"rule__XOrExpression__Group__0\");\n\t\t\tbuilder.put(grammarAccess.getXOrExpressionAccess().getGroup_1(), \"rule__XOrExpression__Group_1__0\");\n\t\t\tbuilder.put(grammarAccess.getXOrExpressionAccess().getGroup_1_0(), \"rule__XOrExpression__Group_1_0__0\");<fim_middle>// class below has no smell\n"}