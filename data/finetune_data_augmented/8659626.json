{"text": "<fim_prefix>/*******************************************************************************\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *******************************************************************************/\npackage org.apache.ofbiz.service.calendar;\nimport java.util.Arrays;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Locale;\nimport org.apache.ofbiz.base.util.Debug;\nimport org.apache.ofbiz.base.util.StringUtil;\nimport org.apache.ofbiz.base.util.UtilValidate;\nimport org.apache.ofbiz.entity.Delegator;\nimport org.apache.ofbiz.entity.GenericEntityException;\nimport org.apache.ofbiz.entity.GenericValue;\nimport com.ibm.icu.util.Calendar;\n/**\n * Recurrence Rule Object\n */\npublic class RecurrenceRule {\n    public static final String module = RecurrenceRule.class.getName();\n    // **********************\n    // * byXXX constants\n    // **********************\n    public static final int MIN_SEC = 0;\n    public static final int MAX_SEC = 59;\n    public static final int MIN_MIN = 0;\n    public static final int MAX_MIN = 59;\n    public static final int MIN_HR = 0;\n    public static final int MAX_HR = 23;\n    public static final int MIN_MTH_DAY = -31;\n    public static final int MAX_MTH_DAY = 31;\n    public static final int MIN_YEAR_DAY = -366;\n    public static final int MAX_YEAR_DAY = 366;\n    public static final int MIN_WEEK_NO = -53;\n    public static final int MAX_WEEK_NO = 53;\n    public static final int MIN_MTH = 1;\n    public static final int MAX_MTH = 12;\n    // **********************\n    // * Frequency constants\n    // **********************\n    /** Frequency SECONDLY */\n    public static final int SECONDLY = 1;\n    /** Frequency MINUTELY */\n    public static final int MINUTELY = 2;\n    /** Frequency HOURLY */\n    public static final int HOURLY = 3;\n    /** Frequency DAILY */\n    public static final int DAILY = 4;\n    /** Frequency WEEKLY */\n    public static final int WEEKLY = 5;\n    /** Frequency MONTHLY */\n    public static final int MONTHLY = 6;\n    /** Frequency YEARLY */\n    public static final int YEARLY = 7;\n    // **********************\n    // * GenericValue object\n    // **********************\n    protected GenericValue rule;\n    // **********************\n    // * Parsed byXXX lists\n    // **********************\n    protected List<String> bySecondList;\n    protected List<String> byMinuteList;\n    protected List<String> byHourList;\n    protected List<String> byDayList;\n    protected List<String> byMonthDayList;\n    protected List<String> byYearDayList;\n    protected List<String> byWeekNoList;\n    protected List<String> byMonthList;\n    protected List<String> bySetPosList;\n    /**\n     * Creates a new RecurrenceRule object from a RecurrenceInfo entity.\n     *@param rule GenericValue object defining this rule.\n     */\n<fim_suffix>    public RecurrenceRule(GenericValue rule) throws RecurrenceRuleException {\n        this.rule = rule;\n        if (!\"RecurrenceRule\".equals(rule.getEntityName())) {\n            throw new RecurrenceRuleException(\"Invalid RecurrenceRule Value object.\");\n        }\n        init();\n    }\n    /**\n     * Initializes the rules for this RecurrenceInfo object.\n     *@throws RecurrenceRuleException\n     */\n    public void init() throws RecurrenceRuleException {\n        // Check the validity of the rule\n        String freq = rule.getString(\"frequency\");\n        if (!checkFreq(freq)) {\n            throw new RecurrenceRuleException(\"Recurrence FREQUENCY is a required parameter.\");\n        }\n        if (rule.getLong(\"intervalNumber\") < 1) {\n            throw new RecurrenceRuleException(\"Recurrence INTERVAL must be a positive integer.\");\n        }\n        // Initialize the byXXX lists\n        bySecondList = StringUtil.split(rule.getString(\"bySecondList\"), \",\");\n        byMinuteList = StringUtil.split(rule.getString(\"byMinuteList\"), \",\");\n        byHourList = StringUtil.split(rule.getString(\"byHourList\"), \",\");\n        byDayList = StringUtil.split(rule.getString(\"byDayList\"), \",\");\n        byMonthDayList = StringUtil.split(rule.getString(\"byMonthDayList\"), \",\");\n        byYearDayList = StringUtil.split(rule.getString(\"byYearDayList\"), \",\");\n        byWeekNoList = StringUtil.split(rule.getString(\"byWeekNoList\"), \",\");\n        byMonthList = StringUtil.split(rule.getString(\"byMonthList\"), \",\");\n        bySetPosList = StringUtil.split(rule.getString(\"bySetPosList\"), \",\");\n    }\n    // Checks for a valid frequency property.\n    private boolean checkFreq(String freq) {\n        if (freq == null) {\n            return false;\n        }\n        if (\"SECONDLY\".equalsIgnoreCase(freq)) {\n            return true;\n        }\n        if (\"MINUTELY\".equalsIgnoreCase(freq)) {\n            return true;\n        }\n        if (\"HOURLY\".equalsIgnoreCase(freq)) {\n            return true;\n        }\n        if (\"DAILY\".equalsIgnoreCase(freq)) {\n            return true;\n        }\n        if (\"WEEKLY\".equalsIgnoreCase(freq)) {\n            return true;\n        }\n        if (\"MONTHLY\".equalsIgnoreCase(freq)) {\n            return true;\n        }\n        if (\"YEARLY\".equalsIgnoreCase(freq)) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Gets the end time of the recurrence rule or 0 if none.\n     *@return long The timestamp of the end time for this rule or 0 for none.\n     */\n    public long getEndTime() {\n        if (rule == null) {\n            if (Debug.verboseOn()) Debug.logVerbose(\"Rule is null.\", module);\n            return -1;\n        }\n        long time = 0;\n        java.sql.Timestamp stamp = null;\n        stamp = rule.getTimestamp(\"untilDateTime\");\n        if (Debug.verboseOn()) Debug.logVerbose(\"Stamp value: \" + stamp, module);\n        if (stamp != null) {\n            long nanos = stamp.getNanos();\n            time = stamp.getTime();\n            time += (nanos / 1000000);\n        }\n        if (Debug.verboseOn()) Debug.logVerbose(\"Returning time: \" + time, module);\n        return time;\n    }\n    /**\n     * Get the number of times this recurrence will run (-1 until end time).\n     *@return long The number of time this recurrence will run.\n     */\n    public long getCount() {\n        if (rule.get(\"countNumber\") != null) {\n            return rule.getLong(\"countNumber\");\n        }\n        return 0;\n    }\n    /**\n     * Returns the frequency name of the recurrence.\n     *@return String The name of this frequency.\n     */\n    public String getFrequencyName() {\n        return rule.getString(\"frequency\").toUpperCase(Locale.getDefault());\n    }\n    /**\n     * Returns the frequency of this recurrence.\n     *@return int The reference value for the frequency\n     */\n    public int getFrequency() {\n        String freq = rule.getString(\"frequency\");\n        if (freq == null) {\n            return 0;\n        }\n        if (\"SECONDLY\".equalsIgnoreCase(freq)) {\n            return SECONDLY;\n        }\n        if (\"MINUTELY\".equalsIgnoreCase(freq)) {\n            return MINUTELY;\n        }\n        if (\"HOURLY\".equalsIgnoreCase(freq)) {\n            return HOURLY;\n        }\n        if (\"DAILY\".equalsIgnoreCase(freq)) {\n            return DAILY;\n        }\n        if (\"WEEKLY\".equalsIgnoreCase(freq)) {\n            return WEEKLY;\n        }\n        if (\"MONTHLY\".equalsIgnoreCase(freq)) {\n            return MONTHLY;\n        }\n        if (\"YEARLY\".equalsIgnoreCase(freq)) {\n            return YEARLY;\n        }\n        return 0;\n    }\n    /**\n     * Returns the interval of the frequency.\n     *@return long Interval value\n     */\n    public long getInterval() {\n        if (rule.get(\"intervalNumber\") == null) {\n            return 1;\n        }\n        return rule.getLong(\"intervalNumber\");\n    }\n    /**\n     * Returns the interval of the frequency as an int.<fim_middle>// function below has no smell\n"}