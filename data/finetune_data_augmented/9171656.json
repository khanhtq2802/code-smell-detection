{"text": "<fim_prefix>/*******************************************************************************\n * Copyright (c) 2008 Actuate Corporation.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *  Actuate Corporation  - initial API and implementation\n *******************************************************************************/\n\npackage org.eclipse.birt.core.btree;\n\nimport java.io.DataInput;\nimport java.io.DataOutput;\nimport java.io.IOException;\n\n/**\n * \n * the structure of ExternalValueList is:\n * \n *<pre>\n * VALUE_COUNT\t\tINT\t\ttotal values in the list\t\t\t\t\n * LIST_NODE_ID\t\tINT\t\tthe first VALUE_NODE used to save the list\n * LAST_NODE_ID\t\tINT\t\tthe last VALUE_NODE used to save the list\n *</pre>\n * \n * @param <K>\n * @param <V>\n */\n<fim_suffix>public class ExternalValueList<K, V> implements BTreeValues<V>\n{\n\n\tprivate BTree<K, V> btree;\n\tprivate int valueCount;\n\tprivate int firstNodeId;\n\tprivate int lastNodeId;\n\n\tpublic ExternalValueList( BTree<K, V> btree )\n\t{\n\t\tthis.btree = btree;\n\t\tthis.valueCount = 0;\n\t\tthis.firstNodeId = -1;\n\t\tthis.lastNodeId = -1;\n\t}\n\n\tpublic int getType( )\n\t{\n\t\treturn EXTERNAL_VALUES;\n\t}\n\n\tpublic int getValueSize( )\n\t{\n\t\treturn 12;\n\t}\n\n\tpublic int getFirstNodeId( )\n\t{\n\t\treturn firstNodeId;\n\t}\n\n\tpublic int getLastNodeId( )\n\t{\n\t\treturn lastNodeId;\n\t}\n\n\tpublic void read( DataInput input ) throws IOException\n\t{\n\t\tvalueCount = input.readInt( );\n\t\tfirstNodeId = input.readInt( );\n\t\tlastNodeId = input.readInt( );\n\t}\n\n\tpublic void write( DataOutput output ) throws IOException\n\t{\n\t\toutput.writeInt( valueCount );\n\t\toutput.writeInt( firstNodeId );\n\t\toutput.writeInt( lastNodeId );\n\t}\n\n\tpublic Value<V> getFirstValue( ) throws IOException\n\t{\n\t\tif ( firstNodeId != -1 )\n\t\t{\n\t\t\tValueNode<K, V> valueNode = btree.loadValueNode( firstNodeId );\n\t\t\ttry\n\t\t\t{\n\t\t\t\tValueEntry<V> entry = valueNode.getFirstEntry( );\n\t\t\t\treturn new ExternalValue( valueNode, entry );\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tvalueNode.unlock( );\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic Value<V> getLastValue( ) throws IOException\n\t{\n\t\tif ( lastNodeId != -1 )\n\t\t{\n\t\t\tValueNode<K, V> valueNode = btree.loadValueNode( lastNodeId );\n\t\t\ttry\n\t\t\t{\n\t\t\t\tValueEntry<V> entry = valueNode.getLastEntry( );\n\t\t\t\treturn new ExternalValue( valueNode, entry );\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tvalueNode.unlock( );\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic int getValueCount( )\n\t{\n\t\treturn valueCount;\n\t}\n\n\tpublic Value<V> append( BTreeValue<V> value ) throws IOException\n\t{\n\t\tif ( lastNodeId == -1 )\n\t\t{\n\t\t\tValueNode<K, V> valueNode = btree.createValueNode( );\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfirstNodeId = valueNode.getNodeId( );\n\t\t\t\tlastNodeId = valueNode.getNodeId( );\n\t\t\t\tValueEntry<V> entry = valueNode.append( value );\n\t\t\t\tvalueCount++;\n\t\t\t\treturn new ExternalValue( valueNode, entry );\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tvalueNode.unlock( );\n\t\t\t}\n\t\t}\n\n\t\tValueNode<K, V> lastNode = btree.loadValueNode( lastNodeId );\n\t\ttry\n\t\t{\n\t\t\tint valueSize = btree.getValueSize( value );\n\t\t\tint nodeSize = lastNode.getNodeSize( );\n\t\t\tif ( nodeSize + valueSize <= BTreeConstants.MAX_NODE_SIZE )\n\t\t\t{\n\t\t\t\t// append it to the new node\n\t\t\t\tValueEntry<V> entry = lastNode.append( value );\n\t\t\t\tvalueCount++;\n\t\t\t\treturn new ExternalValue( lastNode, entry );\n\t\t\t}\n\n\t\t\t// append the value into the new node\n\t\t\tValueNode<K, V> valueNode = btree.createValueNode( );\n\t\t\ttry\n\t\t\t{\n\t\t\t\tValueEntry<V> entry = valueNode.append( value );\n\t\t\t\tvalueNode.setPrevNodeId( lastNode.getNodeId( ) );\n\t\t\t\tlastNode.setNextNodeId( valueNode.getNodeId( ) );\n\t\t\t\tlastNode.setDirty( true );\n\t\t\t\tlastNodeId = valueNode.getNodeId( );\n\t\t\t\tvalueCount++;\n\t\t\t\treturn new ExternalValue( valueNode, entry );\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tvalueNode.unlock( );\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tlastNode.unlock( );\n\t\t}\n\t}\n\n\tclass ExternalValue implements Value<V>\n\t{\n\n\t\tValueNode<K, V> node;\n\t\tValueEntry<V> entry;\n\n\t\tExternalValue( ValueNode<K, V> node, ValueEntry<V> entry )\n\t\t{\n\t\t\tthis.node = node;\n\t\t\tthis.entry = entry;\n\t\t}\n\n\t\tpublic Value<V> getPrev( ) throws IOException\n\t\t{\n\t\t\tValueEntry<V> prev = entry.getPrev( );\n\t\t\tif ( prev != null )\n\t\t\t{\n\t\t\t\treturn new ExternalValue( node, prev );\n\t\t\t}\n\n\t\t\tint prevNodeId = node.getPrevNodeId( );\n\t\t\tif ( prevNodeId != -1 )\n\t\t\t{\n\t\t\t\tValueNode<K, V> prevNode = btree.loadValueNode( prevNodeId );\n\t\t\t\ttry\n\n\t\t\t\t{\n\t\t\t\t\tprev = prevNode.getLastEntry( );\n\t\t\t\t\tif ( prev != null )\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new ExternalValue( prevNode, prev );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfinally\n\t\t\t\t{\n\t\t\t\t\tprevNode.unlock( );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\tpublic Value<V> getNext( ) throws IOException\n\t\t{\n\t\t\tValueEntry<V> next = entry.getNext( );\n\t\t\tif ( next != null )\n\t\t\t{\n\t\t\t\treturn new ExternalValue( node, next );\n\t\t\t}\n\t\t\tint nextNodeId = node.getNextNodeId( );\n\t\t\tif ( nextNodeId != -1 )\n\t\t\t{\n\t\t\t\tValueNode<K, V> nextNode = btree.loadValueNode( nextNodeId );\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tnext = nextNode.getFirstEntry( );\n\t\t\t\t\tif ( next != null )\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new ExternalValue( nextNode, next );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfinally\n\t\t\t\t{\n\t\t\t\t\tnextNode.unlock( );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\tpublic BTreeValue<V> getValue( )\n\t\t{\n\t\t\treturn entry.getValue( );\n\t\t}\n\t}\n}<fim_middle>// class below has no smell\n"}