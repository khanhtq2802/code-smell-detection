{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.phoenix.compile;\n\nimport java.sql.SQLException;\n\nimport org.apache.phoenix.parse.BindParseNode;\nimport org.apache.phoenix.parse.FilterableStatement;\nimport org.apache.phoenix.parse.LiteralParseNode;\nimport org.apache.phoenix.parse.OffsetNode;\nimport org.apache.phoenix.parse.ParseNodeFactory;\nimport org.apache.phoenix.parse.TraverseNoParseNodeVisitor;\nimport org.apache.phoenix.schema.PDatum;\nimport org.apache.phoenix.schema.SortOrder;\nimport org.apache.phoenix.schema.types.PDataType;\nimport org.apache.phoenix.schema.types.PInteger;\n\n<fim_suffix>public class OffsetCompiler {\n    private static final ParseNodeFactory NODE_FACTORY = new ParseNodeFactory();\n\n    public static final PDatum OFFSET_DATUM = new PDatum() {\n        @Override\n        public boolean isNullable() {\n            return false;\n        }\n\n        @Override\n        public PDataType getDataType() {\n            return PInteger.INSTANCE;\n        }\n\n        @Override\n        public Integer getMaxLength() {\n            return null;\n        }\n\n        @Override\n        public Integer getScale() {\n            return null;\n        }\n\n        @Override\n        public SortOrder getSortOrder() {\n            return SortOrder.getDefault();\n        }\n    };\n\n    private OffsetCompiler() {}\n\n    public static Integer compile(StatementContext context, FilterableStatement statement) throws SQLException {\n        OffsetNode offsetNode = statement.getOffset();\n        if (offsetNode == null) { return null; }\n        OffsetParseNodeVisitor visitor = new OffsetParseNodeVisitor(context);\n        offsetNode.getOffsetParseNode().accept(visitor);\n        return visitor.getOffset();\n    }\n\n    private static class OffsetParseNodeVisitor extends TraverseNoParseNodeVisitor<Void> {\n        private final StatementContext context;\n        private Integer offset;\n\n        public OffsetParseNodeVisitor(StatementContext context) {\n            this.context = context;\n        }\n\n        public Integer getOffset() {\n            return offset;\n        }\n\n        @Override\n        public Void visit(LiteralParseNode node) throws SQLException {\n            Object offsetValue = node.getValue();\n            if (offsetValue != null) {\n                Integer offset = (Integer)OFFSET_DATUM.getDataType().toObject(offsetValue, node.getType());\n                if (offset.intValue() >= 0) {\n                    this.offset = offset;\n                }\n            }\n            return null;\n        }\n\n        @Override\n        public Void visit(BindParseNode node) throws SQLException {\n            // This is for static evaluation in SubselectRewriter.\n            if (context == null) return null;\n\n            Object value = context.getBindManager().getBindValue(node);\n            context.getBindManager().addParamMetaData(node, OFFSET_DATUM);\n            // Resolve the bind value, create a LiteralParseNode, and call the\n            // visit method for it.\n            // In this way, we can deal with just having a literal on one side\n            // of the expression.\n            visit(NODE_FACTORY.literal(value, OFFSET_DATUM.getDataType()));\n            return null;\n        }\n\n    }\n\n}<fim_middle>// class below has no smell\n"}