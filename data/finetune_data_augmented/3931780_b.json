{"text": "<fim_prefix>\n<fim_suffix>  public static class deleteTable_args implements org.apache.thrift.TBase<deleteTable_args, deleteTable_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteTable_args>   {\n    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"deleteTable_args\");\n    private static final org.apache.thrift.protocol.TField LOGIN_FIELD_DESC = new org.apache.thrift.protocol.TField(\"login\", org.apache.thrift.protocol.TType.STRING, (short)1);\n    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(\"tableName\", org.apache.thrift.protocol.TType.STRING, (short)2);\n    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteTable_argsStandardSchemeFactory();\n    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteTable_argsTupleSchemeFactory();\n    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer login; // required\n    public @org.apache.thrift.annotation.Nullable java.lang.String tableName; // required\n    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n    public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n      LOGIN((short)1, \"login\"),\n      TABLE_NAME((short)2, \"tableName\");\n      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();\n      static {\n        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {\n          byName.put(field.getFieldName(), field);\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, or null if its not found.\n       */\n      @org.apache.thrift.annotation.Nullable\n      public static _Fields findByThriftId(int fieldId) {\n        switch(fieldId) {\n          case 1: // LOGIN\n            return LOGIN;\n          case 2: // TABLE_NAME\n            return TABLE_NAME;\n          default:\n            return null;\n        }\n      }\n      /**\n       * Find the _Fields constant that matches fieldId, throwing an exception\n       * if it is not found.\n       */\n      public static _Fields findByThriftIdOrThrow(int fieldId) {\n        _Fields fields = findByThriftId(fieldId);\n        if (fields == null) throw new java.lang.IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n        return fields;\n      }\n      /**\n       * Find the _Fields constant that matches name, or null if its not found.\n       */\n      @org.apache.thrift.annotation.Nullable\n      public static _Fields findByName(java.lang.String name) {\n        return byName.get(name);\n      }\n      private final short _thriftId;\n      private final java.lang.String _fieldName;\n      _Fields(short thriftId, java.lang.String fieldName) {\n        _thriftId = thriftId;\n        _fieldName = fieldName;\n      }\n      public short getThriftFieldId() {\n        return _thriftId;\n      }\n      public java.lang.String getFieldName() {\n        return _fieldName;\n      }\n    }\n    // isset id assignments\n    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n    static {\n      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n      tmpMap.put(_Fields.LOGIN, new org.apache.thrift.meta_data.FieldMetaData(\"login\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));\n      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData(\"tableName\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));\n      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);\n      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteTable_args.class, metaDataMap);\n    }\n    public deleteTable_args() {\n    }\n    public deleteTable_args(\n      java.nio.ByteBuffer login,\n      java.lang.String tableName)\n    {\n      this();\n      this.login = org.apache.thrift.TBaseHelper.copyBinary(login);\n      this.tableName = tableName;\n    }\n    /**\n     * Performs a deep copy on <i>other</i>.\n     */\n    public deleteTable_args(deleteTable_args other) {\n      if (other.isSetLogin()) {\n        this.login = org.apache.thrift.TBaseHelper.copyBinary(other.login);\n      }\n      if (other.isSetTableName()) {\n        this.tableName = other.tableName;\n      }\n    }\n    public deleteTable_args deepCopy() {\n      return new deleteTable_args(this);\n    }\n    @Override\n    public void clear() {\n      this.login = null;\n      this.tableName = null;\n    }\n    public byte[] getLogin() {\n      setLogin(org.apache.thrift.TBaseHelper.rightSize(login));\n      return login == null ? null : login.array();\n    }\n    public java.nio.ByteBuffer bufferForLogin() {\n      return org.apache.thrift.TBaseHelper.copyBinary(login);\n    }\n    public deleteTable_args setLogin(byte[] login) {\n      this.login = login == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(login.clone());\n      return this;\n    }\n    public deleteTable_args setLogin(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer login) {\n      this.login = org.apache.thrift.TBaseHelper.copyBinary(login);\n      return this;\n    }\n    public void unsetLogin() {\n      this.login = null;\n    }\n    /** Returns true if field login is set (has been assigned a value) and false otherwise */\n    public boolean isSetLogin() {\n      return this.login != null;\n    }\n    public void setLoginIsSet(boolean value) {\n      if (!value) {\n        this.login = null;\n      }\n    }\n    @org.apache.thrift.annotation.Nullable\n    public java.lang.String getTableName() {\n      return this.tableName;\n    }\n    public deleteTable_args setTableName(@org.apache.thrift.annotation.Nullable java.lang.String tableName) {\n      this.tableName = tableName;\n      return this;\n    }\n    public void unsetTableName() {\n      this.tableName = null;\n    }\n    /** Returns true if field tableName is set (has been assigned a value) and false otherwise */\n    public boolean isSetTableName() {\n      return this.tableName != null;\n    }\n    public void setTableNameIsSet(boolean value) {\n      if (!value) {\n        this.tableName = null;\n      }\n    }\n    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {\n      switch (field) {\n      case LOGIN:\n        if (value == null) {\n          unsetLogin();\n        } else {\n          if (value instanceof byte[]) {\n            setLogin((byte[])value);\n          } else {\n            setLogin((java.nio.ByteBuffer)value);\n          }\n        }\n        break;\n      case TABLE_NAME:\n        if (value == null) {\n          unsetTableName();\n        } else {\n          setTableName((java.lang.String)value);\n        }\n        break;\n      }\n    }\n    @org.apache.thrift.annotation.Nullable\n    public java.lang.Object getFieldValue(_Fields field) {\n      switch (field) {\n      case LOGIN:\n        return getLogin();\n      case TABLE_NAME:\n        return getTableName();\n      }\n      throw new java.lang.IllegalStateException();\n    }\n    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n    public boolean isSet(_Fields field) {\n      if (field == null) {\n        throw new java.lang.IllegalArgumentException();\n      }\n      switch (field) {\n      case LOGIN:\n        return isSetLogin();\n      case TABLE_NAME:\n        return isSetTableName();\n      }\n      throw new java.lang.IllegalStateException();\n    }\n    @Override\n    public boolean equals(java.lang.Object that) {\n      if (that == null)\n        return false;\n      if (that instanceof deleteTable_args)\n        return this.equals((deleteTable_args)that);\n      return false;\n    }\n    public boolean equals(deleteTable_args that) {\n      if (that == null)\n        return false;\n      if (this == that)\n        return true;\n      boolean this_present_login = true && this.isSetLogin();<fim_middle>// class below is data class and blob\n"}