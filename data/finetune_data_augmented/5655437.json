{"text": "<fim_prefix>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.sis.internal.converter;\n\nimport java.util.Collection;\nimport java.util.ArrayList;\nimport java.util.EnumSet;\nimport java.util.LinkedHashSet;\nimport org.apache.sis.math.FunctionProperty;\n\n\n/**\n * Handles conversions from {@link Collection} to various objects.\n * The source class is fixed to {@code Collection}. The target class is determined\n * by the inner class which extends this {@code CollectionConverter} class.\n *\n * <div class=\"section\">Immutability and thread safety</div>\n * This base class is immutable, and thus inherently thread-safe. Subclasses should be immutable\n * and thread-safe too if they are intended to be cached in {@link ConverterRegistry}.\n *\n * @author  Martin Desruisseaux (Geomatys)\n * @version 0.3\n * @since   0.3\n * @module\n */\n<fim_suffix>abstract class CollectionConverter<T> extends SystemConverter<Collection<?>,T> {\n    /**\n     * For cross-version compatibility.\n     */\n    private static final long serialVersionUID = -9214936334129327955L;\n\n    /**\n     * For inner classes only.\n     */\n    @SuppressWarnings(\"unchecked\")\n    CollectionConverter(final Class<T> targetClass) {\n        super((Class) Collection.class, targetClass);\n    }\n\n    /**\n     * Returns {@link FunctionProperty#SURJECTIVE} by default.\n     */\n    @Override\n    public java.util.Set<FunctionProperty> properties() {\n        return EnumSet.of(FunctionProperty.SURJECTIVE);\n    }\n\n    /**\n     * Converter from {@link Collection} to {@link java.util.List}.\n     */\n    public static final class List extends CollectionConverter<java.util.List<?>> {\n        private static final long serialVersionUID = -8680976097058177832L;\n\n        @SuppressWarnings(\"unchecked\")\n        public List() {                                 // Instantiated by ServiceLoader.\n            super((Class) java.util.List.class);\n        }\n\n        @Override\n        public java.util.List<?> apply(final Collection<?> source) {\n            if (source == null) {\n                return null;\n            }\n            if (source instanceof java.util.List<?>) {\n                return (java.util.List<?>) source;\n            }\n            return new ArrayList<>(source);\n        }\n    }\n\n\n    /**\n     * Converter from {@link Collection} to {@link java.util.Set}.\n     */\n    public static final class Set extends CollectionConverter<java.util.Set<?>> {\n        private static final long serialVersionUID = -1065360595793529078L;\n\n        @SuppressWarnings(\"unchecked\")\n        public Set() {                                  // Instantiated by ServiceLoader.\n            super((Class) java.util.Set.class);\n        }\n\n        @Override\n        public java.util.Set<?> apply(final Collection<?> source) {\n            if (source == null) {\n                return null;\n            }\n            if (source instanceof java.util.Set<?>) {\n                return (java.util.Set<?>) source;\n            }\n            return new LinkedHashSet<>(source);\n        }\n    }\n}<fim_middle>// class below has no smell\n"}