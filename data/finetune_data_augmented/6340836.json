{"text": "<fim_prefix>/******************************************************************************\n * Copyright (c) 2018 TypeFox and others.\n * \n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0,\n * or the Eclipse Distribution License v. 1.0 which is available at\n * http://www.eclipse.org/org/documents/edl-v10.php.\n * \n * SPDX-License-Identifier: EPL-2.0 OR BSD-3-Clause\n ******************************************************************************/\npackage org.eclipse.lsp4j.jsonrpc.json.adapters;\n\nimport java.io.IOException;\n\nimport com.google.gson.Gson;\nimport com.google.gson.JsonElement;\nimport com.google.gson.TypeAdapter;\nimport com.google.gson.TypeAdapterFactory;\nimport com.google.gson.reflect.TypeToken;\nimport com.google.gson.stream.JsonReader;\nimport com.google.gson.stream.JsonWriter;\n\n/**\n * A type adapter that reads every input into a tree of {@link JsonElement}s.\n */\npublic class JsonElementTypeAdapter extends TypeAdapter<Object> {\n\t\n\t/**\n\t * This factory should not be registered with a GsonBuilder because it always matches.\n\t * Use it as argument to a {@link com.google.gson.annotations.JsonAdapter} annotation like this:\n\t * {@code @JsonAdapter(JsonElementTypeAdapter.Factory.class)}\n\t */\n<fim_suffix>\tpublic static class Factory implements TypeAdapterFactory {\n\n\t\t@SuppressWarnings(\"unchecked\")\n\t\t@Override\n\t\tpublic <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {\n\t\t\treturn (TypeAdapter<T>) new JsonElementTypeAdapter(gson);\n\t\t}\n\t\t\n\t}\n\t\n\tprivate final Gson gson;\n\tprivate final TypeAdapter<JsonElement> adapter;\n\n\tpublic JsonElementTypeAdapter(Gson gson) {\n\t\tthis.gson = gson;\n\t\tthis.adapter = gson.getAdapter(JsonElement.class);\n\t}\n\t\n\t@Override\n\tpublic JsonElement read(JsonReader in) throws IOException {\n\t\treturn adapter.read(in);\n\t}\n\n\t@Override\n\tpublic void write(JsonWriter out, Object value) throws IOException {\n\t\tif (value == null) {\n\t\t\tout.nullValue();\n\t\t} else if (value instanceof JsonElement) {\n\t\t\tadapter.write(out, (JsonElement) value);\n\t\t} else {\n\t\t\tgson.toJson(value, value.getClass(), out);;\n\t\t}\n\t}\n\n}<fim_middle>// class below has no smell\n"}