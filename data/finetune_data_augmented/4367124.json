{"text": "<fim_prefix>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.cxf.tools.corba.processors.idl;\n\nimport javax.wsdl.Definition;\n\nimport antlr.collections.AST;\n\nimport org.apache.ws.commons.schema.XmlSchema;\n\n<fim_suffix>public class ParamTypeSpecVisitor extends VisitorBase {\n\n    public ParamTypeSpecVisitor(Scope scope,\n                                Definition defn,\n                                XmlSchema schemaRef,\n                                WSDLASTVisitor wsdlVisitor) {\n        super(scope, defn, schemaRef, wsdlVisitor);\n    }\n\n    public void visit(AST node) {\n        // <param_type_spec> ::= <base_type_spec>\n        //                     | <string_type>\n        //                     | <wstring_type>\n        //                     | <scoped_name>\n\n\n        Visitor visitor = null;\n\n\n        if (PrimitiveTypesVisitor.accept(node)) {\n            // base_type_spec\n            visitor = new PrimitiveTypesVisitor(getScope(), definition, schema, schemas);\n        } else if (StringVisitor.accept(node)) {\n            // string_type_spec\n            // wstring_type_spec\n            visitor = new StringVisitor(getScope(), definition, schema, wsdlVisitor, null);\n\n        } else if (ScopedNameVisitor.accept(getScope(), definition, schema, node, wsdlVisitor)) {\n            // scoped_name\n            visitor = new ScopedNameVisitor(getScope(), definition, schema, wsdlVisitor);\n\n        } else {\n            throw new RuntimeException(\"[ParamTypeSpecVisitor] Invalid IDL: unknown element \"\n                                       + node.toString());\n        }\n\n        visitor.visit(node);\n        setSchemaType(visitor.getSchemaType());\n        setCorbaType(visitor.getCorbaType());\n        setFullyQualifiedName(visitor.getFullyQualifiedName());\n    }\n}<fim_middle>// class below has no smell\n"}