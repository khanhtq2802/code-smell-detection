{"text": "<fim_prefix>/* Copyright (c) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\npackage com.google.gdata.data.photos;\n\nimport com.google.gdata.data.ExtensionDescription;\nimport com.google.gdata.data.ValueConstruct;\n\n/**\n * The photos system id for the element.\n *\n * \n */\n@ExtensionDescription.Default(\n    nsAlias = Namespaces.PHOTOS_ALIAS,\n    nsUri = Namespaces.PHOTOS,\n    localName = GphotoId.XML_NAME)\npublic class GphotoId extends ValueConstruct {\n\n  /** XML element name */\n  static final String XML_NAME = \"id\";\n\n  /**\n   * Default mutable constructor.\n   */\n  public GphotoId() {\n    this(null);\n  }\n\n  /**\n   * Constructor (mutable or immutable).\n   *\n   * @param value immutable gphotoId or <code>null</code> for a mutable gphotoId\n   */\n  public GphotoId(String value) {\n    super(Namespaces.PHOTOS_NAMESPACE, XML_NAME, null, value);\n    setRequired(false);\n  }\n\n  /**\n   * Returns the extension description, specifying whether it is required, and\n   * whether it is repeatable.\n   *\n   * @param required   whether it is required\n   * @param repeatable whether it is repeatable\n   * @return extension description\n   */\n  public static ExtensionDescription getDefaultDescription(boolean required,\n      boolean repeatable) {\n    ExtensionDescription desc =\n        ExtensionDescription.getDefaultDescription(GphotoId.class);\n    desc.setRequired(required);\n    desc.setRepeatable(repeatable);\n    return desc;\n  }\n\n  @Override\n  public String toString() {\n    return \"{GphotoId value=\" + getValue() + \"}\";\n  }\n\n\n<fim_suffix>  public static GphotoId from(Long id) {\n    return new GphotoId(id == null ? null : Long.toString(id));\n  }\n}<fim_middle>// function below has no smell\n"}