{"text": "<fim_prefix>\n<fim_suffix>public class TestFinanceLib extends AbstractNumericTestCase {\n    public void testFv() {\n        double f, r, y, p, x;\n        int n;\n        boolean t = false;\n        r = 0; n = 3; y = 2; p = 7; t = true;\n        f = FinanceLib.fv(r, n, y, p, t);\n        x = -13;\n        assertEquals(\"fv \", x, f);\n        r = 1; n = 10; y = 100; p = 10000; t = false;\n        f = FinanceLib.fv(r, n, y, p, t);\n        x = -10342300;\n        assertEquals(\"fv \", x, f);\n        r = 1; n = 10; y = 100; p = 10000; t = true;\n        f = FinanceLib.fv(r, n, y, p, t);\n        x = -10444600;\n        assertEquals(\"fv \", x, f);\n        r = 2; n = 12; y = 120; p = 12000; t = false;\n        f = FinanceLib.fv(r, n, y, p, t);\n        x = -6409178400d;\n        assertEquals(\"fv \", x, f);\n        r = 2; n = 12; y = 120; p = 12000; t = true;\n        f = FinanceLib.fv(r, n, y, p, t);\n        x = -6472951200d;\n        assertEquals(\"fv \", x, f);\n        // cross tests with pv\n        r = 2.95; n = 13; y = 13000; p = -4406.78544294496; t = false;\n        f = FinanceLib.fv(r, n, y, p, t);\n        x = 333891.230010986; // as returned by excel\n        assertEquals(\"fv \", x, f);\n        r = 2.95; n = 13; y = 13000; p = -17406.7852148156; t = true;\n        f = FinanceLib.fv(r, n, y, p, t);\n        x = 333891.230102539; // as returned by excel\n        assertEquals(\"fv \", x, f);\n    }\n    public void testNpv() {\n        double r;\n        double[] v;\n        double npv;\n        double x;\n        r = 1; v = new double[]{100, 200, 300, 400};\n        npv = FinanceLib.npv(r, v);\n        x = 162.5;\n        assertEquals(\"npv \", x, npv);\n        r = 2.5; v = new double[]{1000, 666.66666, 333.33, 12.2768416};\n        npv = FinanceLib.npv(r, v);\n        x = 347.99232604144827;\n        assertEquals(\"npv \", x, npv);\n        r = 12.33333; v = new double[]{1000, 0, -900, -7777.5765};\n        npv = FinanceLib.npv(r, v);\n        x = 74.3742433377061;\n        assertEquals(\"npv \", x, npv);\n        r = 0.05; v = new double[]{200000, 300000.55, 400000, 1000000, 6000000, 7000000, -300000};\n        npv = FinanceLib.npv(r, v);\n        x = 11342283.4233124;\n        assertEquals(\"npv \", x, npv);\n    }\n    public void testPmt() {\n        double f, r, y, p, x;\n        int n;\n        boolean t = false;\n        r = 0; n = 3; p = 2; f = 7; t = true;\n        y = FinanceLib.pmt(r, n, p, f, t);\n        x = -3;\n        assertEquals(\"pmt \", x, y);    \n        // cross check with pv\n        r = 1; n = 10; p = -109.66796875; f = 10000; t = false;\n        y = FinanceLib.pmt(r, n, p, f, t);\n        x = 100;\n        assertEquals(\"pmt \", x, y);    \n        r = 1; n = 10; p = -209.5703125; f = 10000; t = true;\n        y = FinanceLib.pmt(r, n, p, f, t);\n        x = 100;\n        assertEquals(\"pmt \", x, y);\n        // cross check with fv\n        r = 2; n = 12; f = -6409178400d; p = 12000; t = false;\n        y = FinanceLib.pmt(r, n, p, f, t);\n        x = 120;\n        assertEquals(\"pmt \", x, y);    \n        r = 2; n = 12; f = -6472951200d; p = 12000; t = true;\n        y = FinanceLib.pmt(r, n, p, f, t);\n        x = 120;\n        assertEquals(\"pmt \", x, y);\n    }\n    public void testPv() {\n        double f, r, y, p, x;\n        int n;\n        boolean t = false;\n        r = 0; n = 3; y = 2; f = 7; t = true;\n        f = FinanceLib.pv(r, n, y, f, t);\n        x = -13;\n        assertEquals(\"pv \", x, f);\n        r = 1; n = 10; y = 100; f = 10000; t = false;\n        p = FinanceLib.pv(r, n, y, f, t);\n        x = -109.66796875;\n        assertEquals(\"pv \", x, p);    \n        r = 1; n = 10; y = 100; f = 10000; t = true;\n        p = FinanceLib.pv(r, n, y, f, t);\n        x = -209.5703125;\n        assertEquals(\"pv \", x, p);    \n        r = 2.95; n = 13; y = 13000; f = 333891.23; t = false;\n        p = FinanceLib.pv(r, n, y, f, t);\n        x = -4406.78544294496;\n        assertEquals(\"pv \", x, p);\n        r = 2.95; n = 13; y = 13000; f = 333891.23; t = true;\n        p = FinanceLib.pv(r, n, y, f, t);\n        x = -17406.7852148156;\n        assertEquals(\"pv \", x, p);\n        // cross tests with fv\n        r = 2; n = 12; y = 120; f = -6409178400d; t = false;\n        p = FinanceLib.pv(r, n, y, f, t);\n        x = 12000;\n        assertEquals(\"pv \", x, p);\n        r = 2; n = 12; y = 120; f = -6472951200d; t = true;\n        p = FinanceLib.pv(r, n, y, f, t);\n        x = 12000; \n        assertEquals(\"pv \", x, p);\n    }\n    public void testNper() {\n        double f, r, y, p, x, n;\n        boolean t = false;<fim_middle>// class below has no smell\n"}