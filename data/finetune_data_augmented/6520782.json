{"text": "<fim_prefix>/**\n * Copyright (c) 2018 Contributors to the Eclipse Foundation\n *\n * See the NOTICE file(s) distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License 2.0 which is available at\n * https://www.eclipse.org/legal/epl-2.0\n *\n * SPDX-License-Identifier: EPL-2.0\n */\npackage org.eclipse.vorto.codegen.api;\n\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\nimport org.eclipse.emf.common.util.TreeIterator;\nimport org.eclipse.emf.ecore.EObject;\nimport org.eclipse.vorto.core.api.model.datatype.Entity;\nimport org.eclipse.vorto.core.api.model.datatype.Enum;\nimport org.eclipse.vorto.core.api.model.datatype.ObjectPropertyType;\nimport org.eclipse.vorto.core.api.model.datatype.Type;\nimport org.eclipse.vorto.core.api.model.functionblock.FunctionblockModel;\nimport org.eclipse.vorto.core.api.model.functionblock.RefParam;\nimport org.eclipse.vorto.core.api.model.functionblock.ReturnObjectType;\nimport org.eclipse.vorto.core.api.model.informationmodel.FunctionblockProperty;\nimport org.eclipse.vorto.core.api.model.informationmodel.InformationModel;\n\n/**\n * Generator task that traverses all types used in an information model and generates their platform\n * specific representations\n * \n * @author Alexander Edelmann - Robert Bosch (SEA) Pte. Ltd.\n *\n */\n<fim_suffix>public class DatatypeGeneratorTask implements ICodeGeneratorTask<InformationModel> {\n\n  private IFileTemplate<Entity> entityTemplate;\n  private IFileTemplate<Enum> enumTemplate;\n\n  public DatatypeGeneratorTask(IFileTemplate<Entity> entityTemplate,\n      IFileTemplate<Enum> enumTemplate) {\n    this.entityTemplate = entityTemplate;\n    this.enumTemplate = enumTemplate;\n  }\n\n  @Override\n  public void generate(InformationModel ctx, InvocationContext context, IGeneratedWriter writer) {\n    Set<Type> allTypesUsedInModel = new HashSet<>();\n    for (FunctionblockProperty prop : ctx.getProperties()) {\n      allTypesUsedInModel.addAll(getTypes(prop.getType()));\n    }\n\n    for (Type type : allTypesUsedInModel) {\n      if (type instanceof Entity) {\n        writer.write(new Generated(entityTemplate.getFileName((Entity) type),\n            entityTemplate.getPath((Entity) type),\n            entityTemplate.getContent((Entity) type, context)));\n      } else if (type instanceof Enum) {\n        writer.write(new Generated(enumTemplate.getFileName((Enum) type),\n            enumTemplate.getPath((Enum) type), enumTemplate.getContent((Enum) type, context)));\n      }\n    }\n  }\n\n  private static Set<Type> getTypes(FunctionblockModel model) {\n    Set<Type> allTypes = new LinkedHashSet<>();\n    TreeIterator<EObject> iterator = model.eAllContents();\n    while (iterator.hasNext()) {\n      EObject current = iterator.next();\n      if (current instanceof RefParam) {\n        addTypeAndReferences(((RefParam) current).getType(), allTypes);\n      } else if (current instanceof ReturnObjectType) {\n        addTypeAndReferences(((ReturnObjectType) current).getReturnType(), allTypes);\n      } else if (current instanceof ObjectPropertyType) {\n        addTypeAndReferences(((ObjectPropertyType) current).getType(), allTypes);\n      }\n    }\n    return allTypes;\n  }\n\n  private static void addTypeAndReferences(Type type, Set<Type> container) {\n    if (!container.contains(type)) {\n      container.add(type);\n      Set<Type> references = getTypesOfType(type, container);\n      container.addAll(references);\n    }\n  }\n\n  private static Set<Type> getTypesOfType(Type type, Set<Type> container) {\n    TreeIterator<EObject> iterator = type.eAllContents();\n    while (iterator.hasNext()) {\n      EObject current = iterator.next();\n      if (current instanceof ObjectPropertyType) {\n        if (!container.contains(current)) {\n          container.add(((ObjectPropertyType) current).getType());\n          Set<Type> moreTypes = getTypesOfType(((ObjectPropertyType) current).getType(), container);\n          container.addAll(moreTypes);\n        }\n\n      }\n    }\n\n    return container;\n  }\n}<fim_middle>// class below has no smell\n"}